
Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000346c  08007140  08007140  00008140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a5bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c060  2**0
                  CONTENTS
 10 .bss          000004a0  20000060  20000060  0000c060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000500  20000500  0000c060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001864e  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e53  00000000  00000000  000246de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00028538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001164  00000000  00000000  00029bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026766  00000000  00000000  0002ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022459  00000000  00000000  00051482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df5eb  00000000  00000000  000738db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152ec6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d0  00000000  00000000  00152f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00158fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007128 	.word	0x08007128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007128 	.word	0x08007128

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b3d      	ldr	r3, [pc, #244]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000584:	4a3d      	ldr	r2, [pc, #244]	@ (800067c <MX_ADC1_Init+0x10c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000588:	4b3b      	ldr	r3, [pc, #236]	@ (8000678 <MX_ADC1_Init+0x108>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b3a      	ldr	r3, [pc, #232]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000594:	4b38      	ldr	r3, [pc, #224]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000596:	2201      	movs	r2, #1
 8000598:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059a:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a0:	4b35      	ldr	r3, [pc, #212]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a8:	4b33      	ldr	r3, [pc, #204]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ae:	4b32      	ldr	r3, [pc, #200]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005b0:	4a33      	ldr	r2, [pc, #204]	@ (8000680 <MX_ADC1_Init+0x110>)
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005bc:	2205      	movs	r2, #5
 80005be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	482a      	ldr	r0, [pc, #168]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005d0:	f001 fe8c 	bl	80022ec <HAL_ADC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 ffcc 	bl	8001576 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005de:	2308      	movs	r3, #8
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4822      	ldr	r0, [pc, #136]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005f0:	f001 ffee 	bl	80025d0 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005fa:	f000 ffbc 	bl	8001576 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005fe:	2309      	movs	r3, #9
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	481b      	ldr	r0, [pc, #108]	@ (8000678 <MX_ADC1_Init+0x108>)
 800060c:	f001 ffe0 	bl	80025d0 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000616:	f000 ffae 	bl	8001576 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800061a:	230a      	movs	r3, #10
 800061c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800061e:	2303      	movs	r3, #3
 8000620:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	4814      	ldr	r0, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000628:	f001 ffd2 	bl	80025d0 <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000632:	f000 ffa0 	bl	8001576 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000636:	230b      	movs	r3, #11
 8000638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800063a:	2304      	movs	r3, #4
 800063c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4619      	mov	r1, r3
 8000642:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000644:	f001 ffc4 	bl	80025d0 <HAL_ADC_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800064e:	f000 ff92 	bl	8001576 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000652:	230c      	movs	r3, #12
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000656:	2305      	movs	r3, #5
 8000658:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000660:	f001 ffb6 	bl	80025d0 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800066a:	f000 ff84 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000007c 	.word	0x2000007c
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_DMA_Init+0x3c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <MX_DMA_Init+0x3c>)
 8000694:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_DMA_Init+0x3c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2038      	movs	r0, #56	@ 0x38
 80006ac:	f002 fb0b 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006b0:	2038      	movs	r0, #56	@ 0x38
 80006b2:	f002 fb24 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <sensor_esp>:

float tp;
uint8_t tp1 = 0;
uint8_t tp2 = 0;

void sensor_esp() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
	char buffer[20];
	tp = current_temp;
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <sensor_esp+0xa0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a26      	ldr	r2, [pc, #152]	@ (8000768 <sensor_esp+0xa4>)
 80006d0:	6013      	str	r3, [r2, #0]
	tp = tp * 100;
 80006d2:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <sensor_esp+0xa4>)
 80006d4:	edd3 7a00 	vldr	s15, [r3]
 80006d8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800076c <sensor_esp+0xa8>
 80006dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <sensor_esp+0xa4>)
 80006e2:	edc3 7a00 	vstr	s15, [r3]
	tp1 = tp / 100; // Get integer part
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <sensor_esp+0xa4>)
 80006e8:	ed93 7a00 	vldr	s14, [r3]
 80006ec:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800076c <sensor_esp+0xa8>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <sensor_esp+0xac>)
 8000702:	701a      	strb	r2, [r3, #0]
	tp2 = (int) tp % 100; // Get decimal part
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <sensor_esp+0xa4>)
 8000706:	edd3 7a00 	vldr	s15, [r3]
 800070a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800070e:	ee17 2a90 	vmov	r2, s15
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <sensor_esp+0xb0>)
 8000714:	fb83 1302 	smull	r1, r3, r3, r2
 8000718:	1159      	asrs	r1, r3, #5
 800071a:	17d3      	asrs	r3, r2, #31
 800071c:	1acb      	subs	r3, r1, r3
 800071e:	2164      	movs	r1, #100	@ 0x64
 8000720:	fb01 f303 	mul.w	r3, r1, r3
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <sensor_esp+0xb4>)
 800072a:	701a      	strb	r2, [r3, #0]
	sprintf(buffer, "!TEMP:%d.%02d#", tp1, tp2); // Create data string
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <sensor_esp+0xac>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <sensor_esp+0xb4>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f107 000c 	add.w	r0, r7, #12
 800073a:	4910      	ldr	r1, [pc, #64]	@ (800077c <sensor_esp+0xb8>)
 800073c:	f006 f854 	bl	80067e8 <siprintf>
	uart_EspSendBytes((uint8_t*)buffer, strlen(buffer)); // Send string via UART to ESP
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd43 	bl	80001d0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fc6b 	bl	8002030 <uart_EspSendBytes>
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000000 	.word	0x20000000
 8000768:	200000c4 	.word	0x200000c4
 800076c:	42c80000 	.word	0x42c80000
 8000770:	200000c8 	.word	0x200000c8
 8000774:	51eb851f 	.word	0x51eb851f
 8000778:	200000c9 	.word	0x200000c9
 800077c:	08007140 	.word	0x08007140

08000780 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	@ 0x38
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80007ac:	4b2f      	ldr	r3, [pc, #188]	@ (800086c <MX_FSMC_Init+0xec>)
 80007ae:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80007b2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007b4:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <MX_FSMC_Init+0xec>)
 80007b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000870 <MX_FSMC_Init+0xf0>)
 80007b8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <MX_FSMC_Init+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <MX_FSMC_Init+0xec>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007c6:	4b29      	ldr	r3, [pc, #164]	@ (800086c <MX_FSMC_Init+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007cc:	4b27      	ldr	r3, [pc, #156]	@ (800086c <MX_FSMC_Init+0xec>)
 80007ce:	2210      	movs	r2, #16
 80007d0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <MX_FSMC_Init+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007d8:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_FSMC_Init+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007de:	4b23      	ldr	r3, [pc, #140]	@ (800086c <MX_FSMC_Init+0xec>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_FSMC_Init+0xec>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_FSMC_Init+0xec>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_FSMC_Init+0xec>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_FSMC_Init+0xec>)
 80007fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_FSMC_Init+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_FSMC_Init+0xec>)
 8000808:	2200      	movs	r2, #0
 800080a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_FSMC_Init+0xec>)
 800080e:	2200      	movs	r2, #0
 8000810:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000812:	230f      	movs	r3, #15
 8000814:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000816:	230f      	movs	r3, #15
 8000818:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800081a:	233c      	movs	r3, #60	@ 0x3c
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000822:	2310      	movs	r3, #16
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000826:	2311      	movs	r3, #17
 8000828:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800082e:	2308      	movs	r3, #8
 8000830:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000832:	230f      	movs	r3, #15
 8000834:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000836:	2309      	movs	r3, #9
 8000838:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800083e:	2310      	movs	r3, #16
 8000840:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000842:	2311      	movs	r3, #17
 8000844:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800084a:	463a      	mov	r2, r7
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_FSMC_Init+0xec>)
 8000854:	f003 fe8b 	bl	800456e <HAL_SRAM_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800085e:	f000 fe8a 	bl	8001576 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	@ 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000cc 	.word	0x200000cc
 8000870:	a0000104 	.word	0xa0000104

08000874 <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	@ 0x38
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	4b89      	ldr	r3, [pc, #548]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a88      	ldr	r2, [pc, #544]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b86      	ldr	r3, [pc, #536]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	623b      	str	r3, [r7, #32]
 80008a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	4b82      	ldr	r3, [pc, #520]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a81      	ldr	r2, [pc, #516]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a7a      	ldr	r2, [pc, #488]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b78      	ldr	r3, [pc, #480]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b74      	ldr	r3, [pc, #464]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a73      	ldr	r2, [pc, #460]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b71      	ldr	r3, [pc, #452]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b6d      	ldr	r3, [pc, #436]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a6c      	ldr	r2, [pc, #432]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b66      	ldr	r3, [pc, #408]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a65      	ldr	r2, [pc, #404]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b63      	ldr	r3, [pc, #396]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a5e      	ldr	r2, [pc, #376]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b5c      	ldr	r3, [pc, #368]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b58      	ldr	r3, [pc, #352]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a57      	ldr	r2, [pc, #348]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b55      	ldr	r3, [pc, #340]	@ (8000ab4 <MX_GPIO_Init+0x240>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4852      	ldr	r0, [pc, #328]	@ (8000ab8 <MX_GPIO_Init+0x244>)
 8000970:	f002 ff7e 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 800097a:	4850      	ldr	r0, [pc, #320]	@ (8000abc <MX_GPIO_Init+0x248>)
 800097c:	f002 ff78 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000986:	484e      	ldr	r0, [pc, #312]	@ (8000ac0 <MX_GPIO_Init+0x24c>)
 8000988:	f002 ff72 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000992:	484c      	ldr	r0, [pc, #304]	@ (8000ac4 <MX_GPIO_Init+0x250>)
 8000994:	f002 ff6c 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099e:	484a      	ldr	r0, [pc, #296]	@ (8000ac8 <MX_GPIO_Init+0x254>)
 80009a0:	f002 ff66 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2108      	movs	r1, #8
 80009a8:	4848      	ldr	r0, [pc, #288]	@ (8000acc <MX_GPIO_Init+0x258>)
 80009aa:	f002 ff61 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80009ae:	2310      	movs	r3, #16
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	@ (8000ab8 <MX_GPIO_Init+0x244>)
 80009c6:	f002 fdb7 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80009ca:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4836      	ldr	r0, [pc, #216]	@ (8000abc <MX_GPIO_Init+0x248>)
 80009e4:	f002 fda8 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 80009e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4830      	ldr	r0, [pc, #192]	@ (8000ac0 <MX_GPIO_Init+0x24c>)
 80009fe:	f002 fd9b 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 8000a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4829      	ldr	r0, [pc, #164]	@ (8000ac0 <MX_GPIO_Init+0x24c>)
 8000a1c:	f002 fd8c 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000a20:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4822      	ldr	r0, [pc, #136]	@ (8000ac4 <MX_GPIO_Init+0x250>)
 8000a3a:	f002 fd7d 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8000a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	481a      	ldr	r0, [pc, #104]	@ (8000abc <MX_GPIO_Init+0x248>)
 8000a54:	f002 fd70 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4815      	ldr	r0, [pc, #84]	@ (8000ac8 <MX_GPIO_Init+0x254>)
 8000a72:	f002 fd61 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	@ (8000abc <MX_GPIO_Init+0x248>)
 8000a8c:	f002 fd54 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a90:	2308      	movs	r3, #8
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4809      	ldr	r0, [pc, #36]	@ (8000acc <MX_GPIO_Init+0x258>)
 8000aa8:	f002 fd46 	bl	8003538 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3738      	adds	r7, #56	@ 0x38
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40021400 	.word	0x40021400
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020c00 	.word	0x40020c00

08000ad0 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <MX_I2C1_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b0e:	f002 fec9 	bl	80038a4 <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 fd2d 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000011c 	.word	0x2000011c
 8000b24:	40005400 	.word	0x40005400
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <update_temp>:
 *      Author: Duyen
 */

#include "input_process.h"

void update_temp() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	sensor_Read();
 8000b30:	f000 fd36 	bl	80015a0 <sensor_Read>
	current_temp = sensor_GetTemperature();
 8000b34:	f000 fd42 	bl	80015bc <sensor_GetTemperature>
 8000b38:	eef0 7a40 	vmov.f32	s15, s0
 8000b3c:	4b02      	ldr	r3, [pc, #8]	@ (8000b48 <update_temp+0x1c>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <init_lcd>:
 *      Author: Duyen
 */

#include "interface.h"

void init_lcd(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8000b52:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b56:	f000 f8b7 	bl	8000cc8 <lcd_Clear>
	lcd_ShowStr(20, 150, "TEMPERATURE:", BLACK, BLACK, 16, 1);
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	9302      	str	r3, [sp, #8]
 8000b5e:	2310      	movs	r3, #16
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	2300      	movs	r3, #0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	4a09      	ldr	r2, [pc, #36]	@ (8000b90 <init_lcd+0x44>)
 8000b6a:	2196      	movs	r1, #150	@ 0x96
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f000 fbfd 	bl	800136c <lcd_ShowStr>
	lcd_ShowStr(20 + 160, 150, "oC", BLACK, BLACK, 16, 1);
 8000b72:	2301      	movs	r3, #1
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2310      	movs	r3, #16
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <init_lcd+0x48>)
 8000b82:	2196      	movs	r1, #150	@ 0x96
 8000b84:	20b4      	movs	r0, #180	@ 0xb4
 8000b86:	f000 fbf1 	bl	800136c <lcd_ShowStr>
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08007150 	.word	0x08007150
 8000b94:	08007160 	.word	0x08007160

08000b98 <update_lcd>:

void update_lcd(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af02      	add	r7, sp, #8
	lcd_ShowFloatNum(20 + 100, 150, current_temp, 4, RED, WHITE, 16);
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <update_lcd+0x30>)
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb8:	2196      	movs	r1, #150	@ 0x96
 8000bba:	2078      	movs	r0, #120	@ 0x78
 8000bbc:	f000 f9ca 	bl	8000f54 <lcd_ShowFloatNum>
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000000 	.word	0x20000000

08000bcc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <LCD_WR_REG+0x1c>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	8013      	strh	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	600ffffe 	.word	0x600ffffe

08000bec <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <LCD_WR_DATA+0x1c>)
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	8053      	strh	r3, [r2, #2]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	600ffffe 	.word	0x600ffffe

08000c0c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <LCD_RD_DATA+0x20>)
 8000c14:	885b      	ldrh	r3, [r3, #2]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	b29b      	uxth	r3, r3
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	600ffffe 	.word	0x600ffffe

08000c30 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c4e:	202a      	movs	r0, #42	@ 0x2a
 8000c50:	f7ff ffbc 	bl	8000bcc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffc6 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffc0 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffba 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffb4 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c84:	202b      	movs	r0, #43	@ 0x2b
 8000c86:	f7ff ffa1 	bl	8000bcc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffab 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffa5 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff9f 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cae:	883b      	ldrh	r3, [r7, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff99 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cba:	202c      	movs	r0, #44	@ 0x2c
 8000cbc:	f7ff ff86 	bl	8000bcc <LCD_WR_REG>
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}

08000cc8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <lcd_Clear+0x60>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <lcd_Clear+0x60>)
 8000cdc:	885b      	ldrh	r3, [r3, #2]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ffa3 	bl	8000c30 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	81fb      	strh	r3, [r7, #14]
 8000cee:	e011      	b.n	8000d14 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	81bb      	strh	r3, [r7, #12]
 8000cf4:	e006      	b.n	8000d04 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff77 	bl	8000bec <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	81bb      	strh	r3, [r7, #12]
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <lcd_Clear+0x60>)
 8000d06:	885b      	ldrh	r3, [r3, #2]
 8000d08:	89ba      	ldrh	r2, [r7, #12]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3f3      	bcc.n	8000cf6 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	3301      	adds	r3, #1
 8000d12:	81fb      	strh	r3, [r7, #14]
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <lcd_Clear+0x60>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	89fa      	ldrh	r2, [r7, #14]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3e8      	bcc.n	8000cf0 <lcd_Clear+0x28>
		}
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000170 	.word	0x20000170

08000d2c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	460b      	mov	r3, r1
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	88b9      	ldrh	r1, [r7, #4]
 8000d44:	88f8      	ldrh	r0, [r7, #6]
 8000d46:	f7ff ff73 	bl	8000c30 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff4d 	bl	8000bec <LCD_WR_DATA>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4604      	mov	r4, r0
 8000d64:	4608      	mov	r0, r1
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	80fb      	strh	r3, [r7, #6]
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80bb      	strh	r3, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	70fb      	strb	r3, [r7, #3]
 8000d76:	4613      	mov	r3, r2
 8000d78:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	fb12 f303 	smulbb	r3, r2, r3
 8000db2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	3b20      	subs	r3, #32
 8000db8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b29c      	uxth	r4, r3
 8000dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	88b9      	ldrh	r1, [r7, #4]
 8000dda:	88f8      	ldrh	r0, [r7, #6]
 8000ddc:	4622      	mov	r2, r4
 8000dde:	f7ff ff27 	bl	8000c30 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	827b      	strh	r3, [r7, #18]
 8000de6:	e086      	b.n	8000ef6 <lcd_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[character][i];
 8000de8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dec:	2b0c      	cmp	r3, #12
 8000dee:	d10b      	bne.n	8000e08 <lcd_ShowChar+0xac>
 8000df0:	78fa      	ldrb	r2, [r7, #3]
 8000df2:	8a79      	ldrh	r1, [r7, #18]
 8000df4:	4845      	ldr	r0, [pc, #276]	@ (8000f0c <lcd_ShowChar+0x1b0>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4403      	add	r3, r0
 8000e00:	440b      	add	r3, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	75fb      	strb	r3, [r7, #23]
 8000e06:	e028      	b.n	8000e5a <lcd_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000e08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d108      	bne.n	8000e22 <lcd_ShowChar+0xc6>
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	8a7b      	ldrh	r3, [r7, #18]
 8000e14:	493e      	ldr	r1, [pc, #248]	@ (8000f10 <lcd_ShowChar+0x1b4>)
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	440a      	add	r2, r1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e01b      	b.n	8000e5a <lcd_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e26:	2b18      	cmp	r3, #24
 8000e28:	d10b      	bne.n	8000e42 <lcd_ShowChar+0xe6>
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	8a79      	ldrh	r1, [r7, #18]
 8000e2e:	4839      	ldr	r0, [pc, #228]	@ (8000f14 <lcd_ShowChar+0x1b8>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4403      	add	r3, r0
 8000e3a:	440b      	add	r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	75fb      	strb	r3, [r7, #23]
 8000e40:	e00b      	b.n	8000e5a <lcd_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000e42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e46:	2b20      	cmp	r3, #32
 8000e48:	d15b      	bne.n	8000f02 <lcd_ShowChar+0x1a6>
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	8a7b      	ldrh	r3, [r7, #18]
 8000e4e:	4932      	ldr	r1, [pc, #200]	@ (8000f18 <lcd_ShowChar+0x1bc>)
 8000e50:	0192      	lsls	r2, r2, #6
 8000e52:	440a      	add	r2, r1
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75bb      	strb	r3, [r7, #22]
 8000e5e:	e044      	b.n	8000eea <lcd_ShowChar+0x18e>
		{
			if(!mode)
 8000e60:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d120      	bne.n	8000eaa <lcd_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e68:	7dfa      	ldrb	r2, [r7, #23]
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	fa42 f303 	asr.w	r3, r2, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <lcd_ShowChar+0x126>
 8000e78:	883b      	ldrh	r3, [r7, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff feb6 	bl	8000bec <LCD_WR_DATA>
 8000e80:	e003      	b.n	8000e8a <lcd_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8000e82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff feb1 	bl	8000bec <LCD_WR_DATA>
				m++;
 8000e8a:	7d7b      	ldrb	r3, [r7, #21]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e98:	fb01 f202 	mul.w	r2, r1, r2
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11f      	bne.n	8000ee4 <lcd_ShowChar+0x188>
				{
					m=0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	757b      	strb	r3, [r7, #21]
					break;
 8000ea8:	e022      	b.n	8000ef0 <lcd_ShowChar+0x194>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000eaa:	7dfa      	ldrb	r2, [r7, #23]
 8000eac:	7dbb      	ldrb	r3, [r7, #22]
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <lcd_ShowChar+0x16a>
 8000eba:	883a      	ldrh	r2, [r7, #0]
 8000ebc:	88b9      	ldrh	r1, [r7, #4]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff33 	bl	8000d2c <lcd_DrawPoint>
				x++;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	8a3b      	ldrh	r3, [r7, #16]
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d105      	bne.n	8000ee4 <lcd_ShowChar+0x188>
				{
					x=x0;
 8000ed8:	8a3b      	ldrh	r3, [r7, #16]
 8000eda:	80fb      	strh	r3, [r7, #6]
					y++;
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	80bb      	strh	r3, [r7, #4]
					break;
 8000ee2:	e005      	b.n	8000ef0 <lcd_ShowChar+0x194>
		for(t=0;t<8;t++)
 8000ee4:	7dbb      	ldrb	r3, [r7, #22]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	75bb      	strb	r3, [r7, #22]
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d9b7      	bls.n	8000e60 <lcd_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	827b      	strh	r3, [r7, #18]
 8000ef6:	8a7a      	ldrh	r2, [r7, #18]
 8000ef8:	89bb      	ldrh	r3, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f4ff af74 	bcc.w	8000de8 <lcd_ShowChar+0x8c>
 8000f00:	e000      	b.n	8000f04 <lcd_ShowChar+0x1a8>
		else return;
 8000f02:	bf00      	nop
				}
			}
		}
	}
}
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08007164 	.word	0x08007164
 8000f10:	080075d8 	.word	0x080075d8
 8000f14:	08007bc8 	.word	0x08007bc8
 8000f18:	08008d98 	.word	0x08008d98

08000f1c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f30:	e004      	b.n	8000f3c <mypow+0x20>
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	1e5a      	subs	r2, r3, #1
 8000f40:	71ba      	strb	r2, [r7, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f5      	bne.n	8000f32 <mypow+0x16>
	return result;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b08b      	sub	sp, #44	@ 0x2c
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	81fb      	strh	r3, [r7, #14]
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	81bb      	strh	r3, [r7, #12]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	4613      	mov	r3, r2
 8000f74:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8000f76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f7a:	085b      	lsrs	r3, r3, #1
 8000f7c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8000f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f82:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800105c <lcd_ShowFloatNum+0x108>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	e057      	b.n	800104a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8000f9a:	8abc      	ldrh	r4, [r7, #20]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4619      	mov	r1, r3
 8000faa:	200a      	movs	r0, #10
 8000fac:	f7ff ffb6 	bl	8000f1c <mypow>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	fbb4 f1f3 	udiv	r1, r4, r3
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <lcd_ShowFloatNum+0x10c>)
 8000fb8:	fba3 2301 	umull	r2, r3, r3, r1
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	1aca      	subs	r2, r1, r3
 8000fc8:	4613      	mov	r3, r2
 8000fca:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8000fcc:	7dfa      	ldrb	r2, [r7, #23]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	3b02      	subs	r3, #2
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d11d      	bne.n	8001012 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	3b02      	subs	r3, #2
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	fb12 f303 	smulbb	r3, r2, r3
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b298      	uxth	r0, r3
 8000fec:	88ba      	ldrh	r2, [r7, #4]
 8000fee:	89b9      	ldrh	r1, [r7, #12]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	222e      	movs	r2, #46	@ 0x2e
 8001002:	f7ff feab 	bl	8000d5c <lcd_ShowChar>
			t++;
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	3301      	adds	r3, #1
 800100a:	75fb      	strb	r3, [r7, #23]
			len+=1;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3301      	adds	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	b29a      	uxth	r2, r3
 8001016:	7dbb      	ldrb	r3, [r7, #22]
 8001018:	b29b      	uxth	r3, r3
 800101a:	fb12 f303 	smulbb	r3, r2, r3
 800101e:	b29a      	uxth	r2, r3
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	4413      	add	r3, r2
 8001024:	b298      	uxth	r0, r3
 8001026:	7cfb      	ldrb	r3, [r7, #19]
 8001028:	3330      	adds	r3, #48	@ 0x30
 800102a:	b2da      	uxtb	r2, r3
 800102c:	88bc      	ldrh	r4, [r7, #4]
 800102e:	89b9      	ldrh	r1, [r7, #12]
 8001030:	2300      	movs	r3, #0
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4623      	mov	r3, r4
 8001040:	f7ff fe8c 	bl	8000d5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3301      	adds	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	7dfa      	ldrb	r2, [r7, #23]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3a3      	bcc.n	8000f9a <lcd_ShowFloatNum+0x46>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	42c80000 	.word	0x42c80000
 8001060:	cccccccd 	.word	0xcccccccd

08001064 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <lcd_SetDir+0x44>)
 8001080:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001084:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <lcd_SetDir+0x44>)
 8001088:	22f0      	movs	r2, #240	@ 0xf0
 800108a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800108c:	e006      	b.n	800109c <lcd_SetDir+0x38>
		lcddev.width=240;
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <lcd_SetDir+0x44>)
 8001090:	22f0      	movs	r2, #240	@ 0xf0
 8001092:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <lcd_SetDir+0x44>)
 8001096:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800109a:	805a      	strh	r2, [r3, #2]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000170 	.word	0x20000170

080010ac <lcd_init>:


void lcd_init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b6:	48aa      	ldr	r0, [pc, #680]	@ (8001360 <lcd_init+0x2b4>)
 80010b8:	f002 fbda 	bl	8003870 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c0:	f001 f8f0 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ca:	48a5      	ldr	r0, [pc, #660]	@ (8001360 <lcd_init+0x2b4>)
 80010cc:	f002 fbd0 	bl	8003870 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d4:	f001 f8e6 	bl	80022a4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ffc3 	bl	8001064 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010de:	20d3      	movs	r0, #211	@ 0xd3
 80010e0:	f7ff fd74 	bl	8000bcc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010e4:	f7ff fd92 	bl	8000c0c <LCD_RD_DATA>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001364 <lcd_init+0x2b8>)
 80010ee:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010f0:	f7ff fd8c 	bl	8000c0c <LCD_RD_DATA>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001364 <lcd_init+0x2b8>)
 80010fa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010fc:	f7ff fd86 	bl	8000c0c <LCD_RD_DATA>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b97      	ldr	r3, [pc, #604]	@ (8001364 <lcd_init+0x2b8>)
 8001106:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001108:	4b96      	ldr	r3, [pc, #600]	@ (8001364 <lcd_init+0x2b8>)
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b94      	ldr	r3, [pc, #592]	@ (8001364 <lcd_init+0x2b8>)
 8001112:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001114:	f7ff fd7a 	bl	8000c0c <LCD_RD_DATA>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b91      	ldr	r3, [pc, #580]	@ (8001364 <lcd_init+0x2b8>)
 800111e:	889b      	ldrh	r3, [r3, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b8f      	ldr	r3, [pc, #572]	@ (8001364 <lcd_init+0x2b8>)
 8001126:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001128:	20cf      	movs	r0, #207	@ 0xcf
 800112a:	f7ff fd4f 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fd5c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001134:	20c1      	movs	r0, #193	@ 0xc1
 8001136:	f7ff fd59 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800113a:	2030      	movs	r0, #48	@ 0x30
 800113c:	f7ff fd56 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001140:	20ed      	movs	r0, #237	@ 0xed
 8001142:	f7ff fd43 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f7ff fd50 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800114c:	2003      	movs	r0, #3
 800114e:	f7ff fd4d 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001152:	2012      	movs	r0, #18
 8001154:	f7ff fd4a 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001158:	2081      	movs	r0, #129	@ 0x81
 800115a:	f7ff fd47 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800115e:	20e8      	movs	r0, #232	@ 0xe8
 8001160:	f7ff fd34 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001164:	2085      	movs	r0, #133	@ 0x85
 8001166:	f7ff fd41 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800116a:	2010      	movs	r0, #16
 800116c:	f7ff fd3e 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001170:	207a      	movs	r0, #122	@ 0x7a
 8001172:	f7ff fd3b 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001176:	20cb      	movs	r0, #203	@ 0xcb
 8001178:	f7ff fd28 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800117c:	2039      	movs	r0, #57	@ 0x39
 800117e:	f7ff fd35 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001182:	202c      	movs	r0, #44	@ 0x2c
 8001184:	f7ff fd32 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd2f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800118e:	2034      	movs	r0, #52	@ 0x34
 8001190:	f7ff fd2c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001194:	2002      	movs	r0, #2
 8001196:	f7ff fd29 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800119a:	20f7      	movs	r0, #247	@ 0xf7
 800119c:	f7ff fd16 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011a0:	2020      	movs	r0, #32
 80011a2:	f7ff fd23 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011a6:	20ea      	movs	r0, #234	@ 0xea
 80011a8:	f7ff fd10 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fd1d 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fd1a 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011b8:	20c0      	movs	r0, #192	@ 0xc0
 80011ba:	f7ff fd07 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011be:	201b      	movs	r0, #27
 80011c0:	f7ff fd14 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011c4:	20c1      	movs	r0, #193	@ 0xc1
 80011c6:	f7ff fd01 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff fd0e 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011d0:	20c5      	movs	r0, #197	@ 0xc5
 80011d2:	f7ff fcfb 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011d6:	2030      	movs	r0, #48	@ 0x30
 80011d8:	f7ff fd08 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011dc:	2030      	movs	r0, #48	@ 0x30
 80011de:	f7ff fd05 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011e2:	20c7      	movs	r0, #199	@ 0xc7
 80011e4:	f7ff fcf2 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011e8:	20b7      	movs	r0, #183	@ 0xb7
 80011ea:	f7ff fcff 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ee:	2036      	movs	r0, #54	@ 0x36
 80011f0:	f7ff fcec 	bl	8000bcc <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80011f4:	2008      	movs	r0, #8
 80011f6:	f7ff fcf9 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011fa:	203a      	movs	r0, #58	@ 0x3a
 80011fc:	f7ff fce6 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001200:	2055      	movs	r0, #85	@ 0x55
 8001202:	f7ff fcf3 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001206:	20b1      	movs	r0, #177	@ 0xb1
 8001208:	f7ff fce0 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fced 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001212:	201a      	movs	r0, #26
 8001214:	f7ff fcea 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001218:	20b6      	movs	r0, #182	@ 0xb6
 800121a:	f7ff fcd7 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff fce4 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001224:	20a2      	movs	r0, #162	@ 0xa2
 8001226:	f7ff fce1 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800122a:	20f2      	movs	r0, #242	@ 0xf2
 800122c:	f7ff fcce 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fcdb 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001236:	2026      	movs	r0, #38	@ 0x26
 8001238:	f7ff fcc8 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fcd5 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001242:	20e0      	movs	r0, #224	@ 0xe0
 8001244:	f7ff fcc2 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001248:	200f      	movs	r0, #15
 800124a:	f7ff fccf 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800124e:	202a      	movs	r0, #42	@ 0x2a
 8001250:	f7ff fccc 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001254:	2028      	movs	r0, #40	@ 0x28
 8001256:	f7ff fcc9 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fcc6 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001260:	200e      	movs	r0, #14
 8001262:	f7ff fcc3 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001266:	2008      	movs	r0, #8
 8001268:	f7ff fcc0 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800126c:	2054      	movs	r0, #84	@ 0x54
 800126e:	f7ff fcbd 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001272:	20a9      	movs	r0, #169	@ 0xa9
 8001274:	f7ff fcba 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001278:	2043      	movs	r0, #67	@ 0x43
 800127a:	f7ff fcb7 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800127e:	200a      	movs	r0, #10
 8001280:	f7ff fcb4 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001284:	200f      	movs	r0, #15
 8001286:	f7ff fcb1 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcae 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fcab 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fca8 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fca5 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012a2:	20e1      	movs	r0, #225	@ 0xe1
 80012a4:	f7ff fc92 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fc9f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012ae:	2015      	movs	r0, #21
 80012b0:	f7ff fc9c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012b4:	2017      	movs	r0, #23
 80012b6:	f7ff fc99 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012ba:	2007      	movs	r0, #7
 80012bc:	f7ff fc96 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012c0:	2011      	movs	r0, #17
 80012c2:	f7ff fc93 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012c6:	2006      	movs	r0, #6
 80012c8:	f7ff fc90 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012cc:	202b      	movs	r0, #43	@ 0x2b
 80012ce:	f7ff fc8d 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012d2:	2056      	movs	r0, #86	@ 0x56
 80012d4:	f7ff fc8a 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012d8:	203c      	movs	r0, #60	@ 0x3c
 80012da:	f7ff fc87 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012de:	2005      	movs	r0, #5
 80012e0:	f7ff fc84 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012e4:	2010      	movs	r0, #16
 80012e6:	f7ff fc81 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff fc7e 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012f0:	203f      	movs	r0, #63	@ 0x3f
 80012f2:	f7ff fc7b 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012f6:	203f      	movs	r0, #63	@ 0x3f
 80012f8:	f7ff fc78 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012fc:	200f      	movs	r0, #15
 80012fe:	f7ff fc75 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001302:	202b      	movs	r0, #43	@ 0x2b
 8001304:	f7ff fc62 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fc6f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fc6c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff fc69 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800131a:	203f      	movs	r0, #63	@ 0x3f
 800131c:	f7ff fc66 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001320:	202a      	movs	r0, #42	@ 0x2a
 8001322:	f7ff fc53 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fc60 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fc5d 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fc5a 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001338:	20ef      	movs	r0, #239	@ 0xef
 800133a:	f7ff fc57 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800133e:	2011      	movs	r0, #17
 8001340:	f7ff fc44 	bl	8000bcc <LCD_WR_REG>
	HAL_Delay(120);
 8001344:	2078      	movs	r0, #120	@ 0x78
 8001346:	f000 ffad 	bl	80022a4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800134a:	2029      	movs	r0, #41	@ 0x29
 800134c:	f7ff fc3e 	bl	8000bcc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001356:	4804      	ldr	r0, [pc, #16]	@ (8001368 <lcd_init+0x2bc>)
 8001358:	f002 fa8a 	bl	8003870 <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020800 	.word	0x40020800
 8001364:	20000170 	.word	0x20000170
 8001368:	40020000 	.word	0x40020000

0800136c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	@ 0x2c
 8001370:	af04      	add	r7, sp, #16
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	461a      	mov	r2, r3
 8001376:	4603      	mov	r3, r0
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	460b      	mov	r3, r1
 800137c:	81bb      	strh	r3, [r7, #12]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800138a:	e034      	b.n	80013f6 <lcd_ShowStr+0x8a>
	{
		if(!bHz)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d131      	bne.n	80013f6 <lcd_ShowStr+0x8a>
		{
//			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
			if(*str>0x80)bHz=1;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b80      	cmp	r3, #128	@ 0x80
 8001398:	d902      	bls.n	80013a0 <lcd_ShowStr+0x34>
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
 800139e:	e02a      	b.n	80013f6 <lcd_ShowStr+0x8a>
			else
			{
				if(*str==0x0D)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b0d      	cmp	r3, #13
 80013a6:	d10b      	bne.n	80013c0 <lcd_ShowStr+0x54>
				{
					y+=sizey;
 80013a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	89bb      	ldrh	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013b4:	8abb      	ldrh	r3, [r7, #20]
 80013b6:	81fb      	strh	r3, [r7, #14]
					str++;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	e017      	b.n	80013f0 <lcd_ShowStr+0x84>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	88fc      	ldrh	r4, [r7, #6]
 80013c6:	89b9      	ldrh	r1, [r7, #12]
 80013c8:	89f8      	ldrh	r0, [r7, #14]
 80013ca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4623      	mov	r3, r4
 80013dc:	f7ff fcbe 	bl	8000d5c <lcd_ShowChar>
					x+=sizey/2;
 80013e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	4413      	add	r3, r2
 80013ee:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3301      	adds	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1c6      	bne.n	800138c <lcd_ShowStr+0x20>
			}
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}

08001408 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800140c:	f000 fed8 	bl	80021c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001410:	f000 f834 	bl	800147c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001414:	f7ff fa2e 	bl	8000874 <MX_GPIO_Init>
	MX_DMA_Init();
 8001418:	f7ff f934 	bl	8000684 <MX_DMA_Init>
	MX_ADC1_Init();
 800141c:	f7ff f8a8 	bl	8000570 <MX_ADC1_Init>
	MX_FSMC_Init();
 8001420:	f7ff f9ae 	bl	8000780 <MX_FSMC_Init>
	MX_I2C1_Init();
 8001424:	f7ff fb54 	bl	8000ad0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001428:	f000 f972 	bl	8001710 <MX_SPI1_Init>
	MX_TIM2_Init();
 800142c:	f000 fd50 	bl	8001ed0 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001430:	f000 fe48 	bl	80020c4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8001434:	f000 fcfc 	bl	8001e30 <MX_TIM1_Init>
	MX_TIM13_Init();
 8001438:	f000 fd96 	bl	8001f68 <MX_TIM13_Init>
	MX_USART2_UART_Init();
 800143c:	f000 fe6c 	bl	8002118 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8001440:	f000 f886 	bl	8001550 <system_init>
	init_lcd();
 8001444:	f7ff fb82 	bl	8000b4c <init_lcd>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE*/
		if (flag_timer2 == 1) {
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <main+0x6c>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d104      	bne.n	800145a <main+0x52>
			flag_timer2 = 0;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <main+0x6c>)
 8001452:	2200      	movs	r2, #0
 8001454:	801a      	strh	r2, [r3, #0]
			update_temp();
 8001456:	f7ff fb69 	bl	8000b2c <update_temp>
		}
		if (flag_timer3 == 1) {
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <main+0x70>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d1f2      	bne.n	8001448 <main+0x40>
			flag_timer3 = 0;
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <main+0x70>)
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]
			update_lcd();
 8001468:	f7ff fb96 	bl	8000b98 <update_lcd>
			sensor_esp();
 800146c:	f7ff f92a 	bl	80006c4 <sensor_esp>
		if (flag_timer2 == 1) {
 8001470:	e7ea      	b.n	8001448 <main+0x40>
 8001472:	bf00      	nop
 8001474:	200001e2 	.word	0x200001e2
 8001478:	200001e8 	.word	0x200001e8

0800147c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	@ 0x50
 8001480:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2230      	movs	r2, #48	@ 0x30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f005 f9cc 	bl	8006828 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <SystemClock_Config+0xcc>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <SystemClock_Config+0xcc>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b0:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <SystemClock_Config+0xcc>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <SystemClock_Config+0xd0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <SystemClock_Config+0xd0>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <SystemClock_Config+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e0:	2310      	movs	r3, #16
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014ec:	2308      	movs	r3, #8
 80014ee:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80014f0:	23a8      	movs	r3, #168	@ 0xa8
 80014f2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fb13 	bl	8003b2c <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x94>
		Error_Handler();
 800150c:	f000 f833 	bl	8001576 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800151c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001520:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001522:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001526:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2105      	movs	r1, #5
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fd74 	bl	800401c <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xc2>
		Error_Handler();
 800153a:	f000 f81c 	bl	8001576 <Error_Handler>
	}
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	@ 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	timer_init();
 8001554:	f000 f850 	bl	80015f8 <timer_init>
	lcd_init();
 8001558:	f7ff fda8 	bl	80010ac <lcd_init>
	sensor_init();
 800155c:	f000 f812 	bl	8001584 <sensor_init>
	uart_init_esp();
 8001560:	f000 fd50 	bl	8002004 <uart_init_esp>

	setTimer2(50);
 8001564:	2032      	movs	r0, #50	@ 0x32
 8001566:	f000 f855 	bl	8001614 <setTimer2>
	setTimer3(30000);
 800156a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800156e:	f000 f86d 	bl	800164c <setTimer3>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}

08001576 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157a:	b672      	cpsid	i
}
 800157c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <Error_Handler+0x8>
	...

08001584 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8001588:	2205      	movs	r2, #5
 800158a:	4903      	ldr	r1, [pc, #12]	@ (8001598 <sensor_init+0x14>)
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <sensor_init+0x18>)
 800158e:	f000 fef1 	bl	8002374 <HAL_ADC_Start_DMA>
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001d8 	.word	0x200001d8
 800159c:	2000007c 	.word	0x2000007c

080015a0 <sensor_Read>:

void sensor_Read(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80015a4:	2205      	movs	r2, #5
 80015a6:	4903      	ldr	r1, [pc, #12]	@ (80015b4 <sensor_Read+0x14>)
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <sensor_Read+0x18>)
 80015aa:	f000 fee3 	bl	8002374 <HAL_ADC_Start_DMA>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001d8 	.word	0x200001d8
 80015b8:	2000007c 	.word	0x2000007c

080015bc <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <sensor_GetTemperature+0x30>)
 80015c2:	891b      	ldrh	r3, [r3, #8]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015cc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80015f0 <sensor_GetTemperature+0x34>
 80015d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80015f4 <sensor_GetTemperature+0x38>
 80015d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015dc:	eef0 7a66 	vmov.f32	s15, s13
}
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	200001d8 	.word	0x200001d8
 80015f0:	43a50000 	.word	0x43a50000
 80015f4:	457ff000 	.word	0x457ff000

080015f8 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <timer_init+0x14>)
 80015fe:	f003 f8b1 	bl	8004764 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001602:	4803      	ldr	r0, [pc, #12]	@ (8001610 <timer_init+0x18>)
 8001604:	f003 f846 	bl	8004694 <HAL_TIM_Base_Start>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000298 	.word	0x20000298
 8001610:	20000250 	.word	0x20000250

08001614 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <setTimer2+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <setTimer2+0x2c>)
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <setTimer2+0x30>)
 800162a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <setTimer2+0x34>)
 800162e:	2200      	movs	r2, #0
 8001630:	801a      	strh	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200001e6 	.word	0x200001e6
 8001644:	200001e4 	.word	0x200001e4
 8001648:	200001e2 	.word	0x200001e2

0800164c <setTimer3>:

void setTimer3(uint16_t duration){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8001656:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <setTimer3+0x2c>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <setTimer3+0x2c>)
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <setTimer3+0x30>)
 8001662:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <setTimer3+0x34>)
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200001ec 	.word	0x200001ec
 800167c:	200001ea 	.word	0x200001ea
 8001680:	200001e8 	.word	0x200001e8

08001684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001694:	d129      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x66>
		if(timer2_counter > 0){
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d010      	beq.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016a8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0){
 80016aa:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016be:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d010      	beq.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016d2:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0){
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d106      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016de:	2201      	movs	r2, #1
 80016e0:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016e8:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200001e4 	.word	0x200001e4
 80016fc:	200001e2 	.word	0x200001e2
 8001700:	200001e6 	.word	0x200001e6
 8001704:	200001ea 	.word	0x200001ea
 8001708:	200001e8 	.word	0x200001e8
 800170c:	200001ec 	.word	0x200001ec

08001710 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001716:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <MX_SPI1_Init+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_SPI1_Init+0x64>)
 800171c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_SPI1_Init+0x64>)
 800173c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_SPI1_Init+0x64>)
 800175c:	220a      	movs	r2, #10
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_SPI1_Init+0x64>)
 8001762:	f002 fe7b 	bl	800445c <HAL_SPI_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800176c:	f7ff ff03 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200001f0 	.word	0x200001f0
 8001778:	40013000 	.word	0x40013000

0800177c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <HAL_MspInit+0x4c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a3c      	ldr	r2, [pc, #240]	@ (80018dc <HAL_ADC_MspInit+0x110>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d171      	bne.n	80018d2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a3a      	ldr	r2, [pc, #232]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a33      	ldr	r2, [pc, #204]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b31      	ldr	r3, [pc, #196]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a2c      	ldr	r2, [pc, #176]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <HAL_ADC_MspInit+0x114>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001842:	2307      	movs	r3, #7
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001846:	2303      	movs	r3, #3
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4823      	ldr	r0, [pc, #140]	@ (80018e4 <HAL_ADC_MspInit+0x118>)
 8001856:	f001 fe6f 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800185a:	2303      	movs	r3, #3
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185e:	2303      	movs	r3, #3
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	481e      	ldr	r0, [pc, #120]	@ (80018e8 <HAL_ADC_MspInit+0x11c>)
 800186e:	f001 fe63 	bl	8003538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 8001874:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <HAL_ADC_MspInit+0x124>)
 8001876:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 800188c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001890:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 8001894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001898:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 800189c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 80018a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 80018b8:	f001 fa3c 	bl	8002d34 <HAL_DMA_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80018c2:	f7ff fe58 	bl	8001576 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 80018ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_ADC_MspInit+0x120>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	@ 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40012000 	.word	0x40012000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020400 	.word	0x40020400
 80018ec:	20000178 	.word	0x20000178
 80018f0:	40026410 	.word	0x40026410

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <HAL_I2C_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12b      	bne.n	800196e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001932:	23c0      	movs	r3, #192	@ 0xc0
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001942:	2304      	movs	r3, #4
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <HAL_I2C_MspInit+0x8c>)
 800194e:	f001 fdf3 	bl	8003538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40005400 	.word	0x40005400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_SPI_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019de:	2338      	movs	r3, #56	@ 0x38
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <HAL_SPI_MspInit+0x8c>)
 80019fa:	f001 fd9d 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020400 	.word	0x40020400

08001a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <HAL_TIM_Base_MspInit+0x98>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10e      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	4a20      	ldr	r2, [pc, #128]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001a42:	e02e      	b.n	8001aa2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a4c:	d116      	bne.n	8001a7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f001 f929 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f001 f942 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001a7a:	e012      	b.n	8001aa2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10d      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40001c00 	.word	0x40001c00

08001ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <HAL_TIM_MspPostInit+0x68>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d11e      	bne.n	8001b18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_TIM_MspPostInit+0x6c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	f043 0320 	orr.w	r3, r3, #32
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_TIM_MspPostInit+0x6c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001b08:	2309      	movs	r3, #9
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4619      	mov	r1, r3
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <HAL_TIM_MspPostInit+0x70>)
 8001b14:	f001 fd10 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40001c00 	.word	0x40001c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40021400 	.word	0x40021400

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	@ 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a3a      	ldr	r2, [pc, #232]	@ (8001c34 <HAL_UART_MspInit+0x108>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d135      	bne.n	8001bba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a38      	ldr	r2, [pc, #224]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a31      	ldr	r2, [pc, #196]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b98:	2307      	movs	r3, #7
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4826      	ldr	r0, [pc, #152]	@ (8001c3c <HAL_UART_MspInit+0x110>)
 8001ba4:	f001 fcc8 	bl	8003538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2025      	movs	r0, #37	@ 0x25
 8001bae:	f001 f88a 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bb2:	2025      	movs	r0, #37	@ 0x25
 8001bb4:	f001 f8a3 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb8:	e038      	b.n	8001c2c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a20      	ldr	r2, [pc, #128]	@ (8001c40 <HAL_UART_MspInit+0x114>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d133      	bne.n	8001c2c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a13      	ldr	r2, [pc, #76]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_UART_MspInit+0x10c>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <HAL_UART_MspInit+0x110>)
 8001c18:	f001 fc8e 	bl	8003538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2026      	movs	r0, #38	@ 0x26
 8001c22:	f001 f850 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c26:	2026      	movs	r0, #38	@ 0x26
 8001c28:	f001 f869 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	@ 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40004400 	.word	0x40004400

08001c44 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001c58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <HAL_FSMC_MspInit+0x88>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d131      	bne.n	8001cc4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_FSMC_MspInit+0x88>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_FSMC_MspInit+0x8c>)
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6e:	4a18      	ldr	r2, [pc, #96]	@ (8001cd0 <HAL_FSMC_MspInit+0x8c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_FSMC_MspInit+0x8c>)
 8001c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c82:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8001c86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c94:	230c      	movs	r3, #12
 8001c96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <HAL_FSMC_MspInit+0x90>)
 8001c9e:	f001 fc4b 	bl	8003538 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001ca2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8001ca6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <HAL_FSMC_MspInit+0x94>)
 8001cbe:	f001 fc3b 	bl	8003538 <HAL_GPIO_Init>
 8001cc2:	e000      	b.n	8001cc6 <HAL_FSMC_MspInit+0x82>
    return;
 8001cc4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000248 	.word	0x20000248
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40020c00 	.word	0x40020c00

08001cdc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ce4:	f7ff ffae 	bl	8001c44 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <MemManage_Handler+0x4>

08001d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d46:	f000 fa8d 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f002 fdce 	bl	80048f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000298 	.word	0x20000298

08001d64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <USART1_IRQHandler+0x10>)
 8001d6a:	f003 fd09 	bl	8005780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000032c 	.word	0x2000032c

08001d78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <USART2_IRQHandler+0x10>)
 8001d7e:	f003 fcff 	bl	8005780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000370 	.word	0x20000370

08001d8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <DMA2_Stream0_IRQHandler+0x10>)
 8001d92:	f001 f967 	bl	8003064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000178 	.word	0x20000178

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f004 fd32 	bl	8006838 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20020000 	.word	0x20020000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	2000024c 	.word	0x2000024c
 8001e08:	20000500 	.word	0x20000500

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ecc <MX_TIM1_Init+0x9c>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e54:	2253      	movs	r2, #83	@ 0x53
 8001e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e78:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e7a:	f002 fbbc 	bl	80045f6 <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e84:	f7ff fb77 	bl	8001576 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4619      	mov	r1, r3
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001e96:	f002 fef9 	bl	8004c8c <HAL_TIM_ConfigClockSource>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ea0:	f7ff fb69 	bl	8001576 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_TIM1_Init+0x98>)
 8001eb2:	f003 fac5 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ebc:	f7ff fb5b 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000250 	.word	0x20000250
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001ef6:	f240 3247 	movw	r2, #839	@ 0x347
 8001efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001f04:	2263      	movs	r2, #99	@ 0x63
 8001f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f14:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001f16:	f002 fb6e 	bl	80045f6 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f20:	f7ff fb29 	bl	8001576 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001f32:	f002 feab 	bl	8004c8c <HAL_TIM_ConfigClockSource>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f3c:	f7ff fb1b 	bl	8001576 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_TIM2_Init+0x94>)
 8001f4e:	f003 fa77 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f7ff fb0d 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000298 	.word	0x20000298

08001f68 <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001f82:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <MX_TIM13_Init+0x98>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001f88:	f240 3247 	movw	r2, #839	@ 0x347
 8001f8c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001f96:	2263      	movs	r2, #99	@ 0x63
 8001f98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001fa6:	4815      	ldr	r0, [pc, #84]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001fa8:	f002 fb25 	bl	80045f6 <HAL_TIM_Base_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001fb2:	f7ff fae0 	bl	8001576 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001fb6:	4811      	ldr	r0, [pc, #68]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001fb8:	f002 fc44 	bl	8004844 <HAL_TIM_PWM_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001fc2:	f7ff fad8 	bl	8001576 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc6:	2360      	movs	r3, #96	@ 0x60
 8001fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001fde:	f002 fd93 	bl	8004b08 <HAL_TIM_PWM_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001fe8:	f7ff fac5 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <MX_TIM13_Init+0x94>)
 8001fee:	f7ff fd63 	bl	8001ab8 <HAL_TIM_MspPostInit>

}
 8001ff2:	bf00      	nop
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002e0 	.word	0x200002e0
 8002000:	40001c00 	.word	0x40001c00

08002004 <uart_init_esp>:
    uart_Rs232SendString((uint8_t*)".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002008:	2201      	movs	r2, #1
 800200a:	4906      	ldr	r1, [pc, #24]	@ (8002024 <uart_init_esp+0x20>)
 800200c:	4806      	ldr	r0, [pc, #24]	@ (8002028 <uart_init_esp+0x24>)
 800200e:	f003 fb86 	bl	800571e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, 1);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002018:	4804      	ldr	r0, [pc, #16]	@ (800202c <uart_init_esp+0x28>)
 800201a:	f001 fc29 	bl	8003870 <HAL_GPIO_WritePin>
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000329 	.word	0x20000329
 8002028:	20000370 	.word	0x20000370
 800202c:	40021400 	.word	0x40021400

08002030 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	230a      	movs	r3, #10
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4803      	ldr	r0, [pc, #12]	@ (8002050 <uart_EspSendBytes+0x20>)
 8002044:	f003 fad9 	bl	80055fa <HAL_UART_Transmit>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000370 	.word	0x20000370

08002054 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <HAL_UART_RxCpltCallback+0x54>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10a      	bne.n	800207c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002066:	230a      	movs	r3, #10
 8002068:	2201      	movs	r2, #1
 800206a:	4910      	ldr	r1, [pc, #64]	@ (80020ac <HAL_UART_RxCpltCallback+0x58>)
 800206c:	4810      	ldr	r0, [pc, #64]	@ (80020b0 <HAL_UART_RxCpltCallback+0x5c>)
 800206e:	f003 fac4 	bl	80055fa <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002072:	2201      	movs	r2, #1
 8002074:	490d      	ldr	r1, [pc, #52]	@ (80020ac <HAL_UART_RxCpltCallback+0x58>)
 8002076:	480e      	ldr	r0, [pc, #56]	@ (80020b0 <HAL_UART_RxCpltCallback+0x5c>)
 8002078:	f003 fb51 	bl	800571e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <HAL_UART_RxCpltCallback+0x60>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10b      	bne.n	800209e <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_UART_RxCpltCallback+0x64>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b4f      	cmp	r3, #79	@ 0x4f
 800208c:	d102      	bne.n	8002094 <HAL_UART_RxCpltCallback+0x40>
 800208e:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_UART_RxCpltCallback+0x68>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002094:	2201      	movs	r2, #1
 8002096:	4908      	ldr	r1, [pc, #32]	@ (80020b8 <HAL_UART_RxCpltCallback+0x64>)
 8002098:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <HAL_UART_RxCpltCallback+0x6c>)
 800209a:	f003 fb40 	bl	800571e <HAL_UART_Receive_IT>
	}
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40011000 	.word	0x40011000
 80020ac:	20000328 	.word	0x20000328
 80020b0:	2000032c 	.word	0x2000032c
 80020b4:	40004400 	.word	0x40004400
 80020b8:	20000329 	.word	0x20000329
 80020bc:	2000032a 	.word	0x2000032a
 80020c0:	20000370 	.word	0x20000370

080020c4 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <MX_USART1_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_USART1_UART_Init+0x4c>)
 80020fc:	f003 fa30 	bl	8005560 <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f7ff fa36 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000032c 	.word	0x2000032c
 8002114:	40011000 	.word	0x40011000

08002118 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <MX_USART2_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_USART2_UART_Init+0x4c>)
 8002150:	f003 fa06 	bl	8005560 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f7ff fa0c 	bl	8001576 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000370 	.word	0x20000370
 8002168:	40004400 	.word	0x40004400

0800216c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800216c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002170:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002172:	490e      	ldr	r1, [pc, #56]	@ (80021ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002174:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0b      	ldr	r2, [pc, #44]	@ (80021b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002188:	4c0b      	ldr	r4, [pc, #44]	@ (80021b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002196:	f7ff fe39 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219a:	f004 fb53 	bl	8006844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219e:	f7ff f933 	bl	8001408 <main>
  bx  lr    
 80021a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80021b0:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 80021b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80021b8:	20000500 	.word	0x20000500

080021bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_Init+0x40>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_Init+0x40>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a07      	ldr	r2, [pc, #28]	@ (8002200 <HAL_Init+0x40>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f000 fd61 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ee:	200f      	movs	r0, #15
 80021f0:	f000 f808 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f4:	f7ff fac2 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_InitTick+0x54>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_InitTick+0x58>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fd79 	bl	8002d1a <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00e      	b.n	8002250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	d80a      	bhi.n	800224e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002238:	2200      	movs	r2, #0
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f000 fd41 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4a06      	ldr	r2, [pc, #24]	@ (8002260 <HAL_InitTick+0x5c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000004 	.word	0x20000004
 800225c:	2000000c 	.word	0x2000000c
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	2000000c 	.word	0x2000000c
 8002288:	200003b4 	.word	0x200003b4

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200003b4 	.word	0x200003b4

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000000c 	.word	0x2000000c

080022ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e033      	b.n	800236a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fa5e 	bl	80017cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002332:	f023 0302 	bic.w	r3, r3, #2
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa68 	bl	8002814 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f023 0303 	bic.w	r3, r3, #3
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40
 800235a:	e001      	b.n	8002360 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Start_DMA+0x1e>
 800238e:	2302      	movs	r3, #2
 8002390:	e0e9      	b.n	8002566 <HAL_ADC_Start_DMA+0x1f2>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d018      	beq.n	80023da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002570 <HAL_ADC_Start_DMA+0x1fc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002574 <HAL_ADC_Start_DMA+0x200>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9a      	lsrs	r2, r3, #18
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e8:	d107      	bne.n	80023fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 80a1 	bne.w	800254c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002434:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002448:	d106      	bne.n	8002458 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f023 0206 	bic.w	r2, r3, #6
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
 8002456:	e002      	b.n	800245e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002466:	4b44      	ldr	r3, [pc, #272]	@ (8002578 <HAL_ADC_Start_DMA+0x204>)
 8002468:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246e:	4a43      	ldr	r2, [pc, #268]	@ (800257c <HAL_ADC_Start_DMA+0x208>)
 8002470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	4a42      	ldr	r2, [pc, #264]	@ (8002580 <HAL_ADC_Start_DMA+0x20c>)
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	4a41      	ldr	r2, [pc, #260]	@ (8002584 <HAL_ADC_Start_DMA+0x210>)
 8002480:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800248a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800249a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	334c      	adds	r3, #76	@ 0x4c
 80024b6:	4619      	mov	r1, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f000 fce8 	bl	8002e90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d12a      	bne.n	8002522 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002588 <HAL_ADC_Start_DMA+0x214>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d015      	beq.n	8002502 <HAL_ADC_Start_DMA+0x18e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2c      	ldr	r2, [pc, #176]	@ (800258c <HAL_ADC_Start_DMA+0x218>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Start_DMA+0x178>
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_ADC_Start_DMA+0x204>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a27      	ldr	r2, [pc, #156]	@ (8002590 <HAL_ADC_Start_DMA+0x21c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d136      	bne.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_ADC_Start_DMA+0x204>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d130      	bne.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d129      	bne.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	e020      	b.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a18      	ldr	r2, [pc, #96]	@ (8002588 <HAL_ADC_Start_DMA+0x214>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d11b      	bne.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	e00b      	b.n	8002564 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000004 	.word	0x20000004
 8002574:	431bde83 	.word	0x431bde83
 8002578:	40012300 	.word	0x40012300
 800257c:	08002a0d 	.word	0x08002a0d
 8002580:	08002ac7 	.word	0x08002ac7
 8002584:	08002ae3 	.word	0x08002ae3
 8002588:	40012000 	.word	0x40012000
 800258c:	40012100 	.word	0x40012100
 8002590:	40012200 	.word	0x40012200

08002594 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e105      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x228>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d925      	bls.n	8002648 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68d9      	ldr	r1, [r3, #12]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	3b1e      	subs	r3, #30
 8002612:	2207      	movs	r2, #7
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43da      	mvns	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	400a      	ands	r2, r1
 8002620:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68d9      	ldr	r1, [r3, #12]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	4603      	mov	r3, r0
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4403      	add	r3, r0
 800263a:	3b1e      	subs	r3, #30
 800263c:	409a      	lsls	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	e022      	b.n	800268e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6919      	ldr	r1, [r3, #16]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	2207      	movs	r2, #7
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	4603      	mov	r3, r0
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4403      	add	r3, r0
 8002684:	409a      	lsls	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b06      	cmp	r3, #6
 8002694:	d824      	bhi.n	80026e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b05      	subs	r3, #5
 80026a8:	221f      	movs	r2, #31
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b05      	subs	r3, #5
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80026de:	e04c      	b.n	800277a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d824      	bhi.n	8002732 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	3b23      	subs	r3, #35	@ 0x23
 80026fa:	221f      	movs	r2, #31
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43da      	mvns	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	400a      	ands	r2, r1
 8002708:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3b23      	subs	r3, #35	@ 0x23
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002730:	e023      	b.n	800277a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	3b41      	subs	r3, #65	@ 0x41
 8002744:	221f      	movs	r2, #31
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b41      	subs	r3, #65	@ 0x41
 800276e:	fa00 f203 	lsl.w	r2, r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800277a:	4b22      	ldr	r3, [pc, #136]	@ (8002804 <HAL_ADC_ConfigChannel+0x234>)
 800277c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <HAL_ADC_ConfigChannel+0x238>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d109      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1cc>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b12      	cmp	r3, #18
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_ADC_ConfigChannel+0x238>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d123      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x21e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d003      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x1e6>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b11      	cmp	r3, #17
 80027b4:	d11b      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d111      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_ADC_ConfigChannel+0x23c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_ADC_ConfigChannel+0x240>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	0c9a      	lsrs	r2, r3, #18
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e0:	e002      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f9      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40012300 	.word	0x40012300
 8002808:	40012000 	.word	0x40012000
 800280c:	20000004 	.word	0x20000004
 8002810:	431bde83 	.word	0x431bde83

08002814 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281c:	4b79      	ldr	r3, [pc, #484]	@ (8002a04 <ADC_Init+0x1f0>)
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800286c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800288e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	4a58      	ldr	r2, [pc, #352]	@ (8002a08 <ADC_Init+0x1f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e00f      	b.n	8002912 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002910:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0202 	bic.w	r2, r2, #2
 8002920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6899      	ldr	r1, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7e1b      	ldrb	r3, [r3, #24]
 800292c:	005a      	lsls	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800294e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800295e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	3b01      	subs	r3, #1
 800296c:	035a      	lsls	r2, r3, #13
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e007      	b.n	8002988 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002986:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	051a      	lsls	r2, r3, #20
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029ca:	025a      	lsls	r2, r3, #9
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	029a      	lsls	r2, r3, #10
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012300 	.word	0x40012300
 8002a08:	0f000001 	.word	0x0f000001

08002a0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d13c      	bne.n	8002aa0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d12b      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d127      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d119      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0220 	bic.w	r2, r2, #32
 8002a72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fd7b 	bl	8002594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a9e:	e00e      	b.n	8002abe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff fd85 	bl	80025bc <HAL_ADC_ErrorCallback>
}
 8002ab2:	e004      	b.n	8002abe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fd67 	bl	80025a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	@ 0x40
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff fd5a 	bl	80025bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	@ (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	@ (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	@ 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff faa4 	bl	800228c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e099      	b.n	8002e84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d70:	e00f      	b.n	8002d92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d72:	f7ff fa8b 	bl	800228c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d908      	bls.n	8002d92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e078      	b.n	8002e84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e8      	bne.n	8002d72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4b38      	ldr	r3, [pc, #224]	@ (8002e8c <HAL_DMA_Init+0x158>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	4313      	orrs	r3, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d117      	bne.n	8002e56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00e      	beq.n	8002e56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb01 	bl	8003440 <DMA_CheckFifoParam>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2240      	movs	r2, #64	@ 0x40
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e52:	2301      	movs	r3, #1
 8002e54:	e016      	b.n	8002e84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fab8 	bl	80033d4 <DMA_CalcBaseAndBitshift>
 8002e64:	4603      	mov	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	223f      	movs	r2, #63	@ 0x3f
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	f010803f 	.word	0xf010803f

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DMA_Start_IT+0x26>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e040      	b.n	8002f38 <HAL_DMA_Start_IT+0xa8>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d12f      	bne.n	8002f2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fa4a 	bl	8003378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	223f      	movs	r2, #63	@ 0x3f
 8002eea:	409a      	lsls	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0216 	orr.w	r2, r2, #22
 8002efe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e005      	b.n	8002f36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
 8002f34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f4e:	f7ff f99d 	bl	800228c <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e052      	b.n	8003018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0216 	bic.w	r2, r2, #22
 8002f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <HAL_DMA_Abort+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0208 	bic.w	r2, r2, #8
 8002fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc2:	e013      	b.n	8002fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc4:	f7ff f962 	bl	800228c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d90c      	bls.n	8002fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e015      	b.n	8003018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e4      	bne.n	8002fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	223f      	movs	r2, #63	@ 0x3f
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d004      	beq.n	800303e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	@ 0x80
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00c      	b.n	8003058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2205      	movs	r2, #5
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003070:	4b8e      	ldr	r3, [pc, #568]	@ (80032ac <HAL_DMA_IRQHandler+0x248>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a8e      	ldr	r2, [pc, #568]	@ (80032b0 <HAL_DMA_IRQHandler+0x24c>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0a9b      	lsrs	r3, r3, #10
 800307c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	2208      	movs	r2, #8
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01a      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	2208      	movs	r2, #8
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f2:	2201      	movs	r2, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	f043 0202 	orr.w	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	2204      	movs	r2, #4
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	2204      	movs	r2, #4
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	2210      	movs	r2, #16
 8003142:	409a      	lsls	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d043      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d03c      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	2210      	movs	r2, #16
 8003160:	409a      	lsls	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d024      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
 8003192:	e01f      	b.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
 80031a4:	e016      	b.n	80031d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0208 	bic.w	r2, r2, #8
 80031c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	2220      	movs	r2, #32
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 808f 	beq.w	8003304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8087 	beq.w	8003304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	2220      	movs	r2, #32
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b05      	cmp	r3, #5
 800320c:	d136      	bne.n	800327c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0216 	bic.w	r2, r2, #22
 800321c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800322c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_DMA_IRQHandler+0x1da>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0208 	bic.w	r2, r2, #8
 800324c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	223f      	movs	r2, #63	@ 0x3f
 8003254:	409a      	lsls	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326e:	2b00      	cmp	r3, #0
 8003270:	d07e      	beq.n	8003370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
        }
        return;
 800327a:	e079      	b.n	8003370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	2b00      	cmp	r3, #0
 800329e:	d031      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e02c      	b.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
 80032aa:	bf00      	nop
 80032ac:	20000004 	.word	0x20000004
 80032b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d023      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
 80032c4:	e01e      	b.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10f      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0210 	bic.w	r2, r2, #16
 80032e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	2b00      	cmp	r3, #0
 800330a:	d032      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2205      	movs	r2, #5
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3301      	adds	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d307      	bcc.n	800334c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f2      	bne.n	8003330 <HAL_DMA_IRQHandler+0x2cc>
 800334a:	e000      	b.n	800334e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800334c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e000      	b.n	8003372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003370:	bf00      	nop
    }
  }
}
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b40      	cmp	r3, #64	@ 0x40
 80033a4:	d108      	bne.n	80033b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033b6:	e007      	b.n	80033c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	3b10      	subs	r3, #16
 80033e4:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <DMA_CalcBaseAndBitshift+0x64>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ee:	4a13      	ldr	r2, [pc, #76]	@ (800343c <DMA_CalcBaseAndBitshift+0x68>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d909      	bls.n	8003416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	1d1a      	adds	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	659a      	str	r2, [r3, #88]	@ 0x58
 8003414:	e007      	b.n	8003426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	aaaaaaab 	.word	0xaaaaaaab
 800343c:	0800a570 	.word	0x0800a570

08003440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11f      	bne.n	800349a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d856      	bhi.n	800350e <DMA_CheckFifoParam+0xce>
 8003460:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <DMA_CheckFifoParam+0x28>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	08003479 	.word	0x08003479
 800346c:	0800348b 	.word	0x0800348b
 8003470:	08003479 	.word	0x08003479
 8003474:	0800350f 	.word	0x0800350f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d046      	beq.n	8003512 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e043      	b.n	8003512 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003492:	d140      	bne.n	8003516 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e03d      	b.n	8003516 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a2:	d121      	bne.n	80034e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d837      	bhi.n	800351a <DMA_CheckFifoParam+0xda>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <DMA_CheckFifoParam+0x70>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034c7 	.word	0x080034c7
 80034b8:	080034c1 	.word	0x080034c1
 80034bc:	080034d9 	.word	0x080034d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	e030      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d025      	beq.n	800351e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d6:	e022      	b.n	800351e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034e0:	d11f      	bne.n	8003522 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034e6:	e01c      	b.n	8003522 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d903      	bls.n	80034f6 <DMA_CheckFifoParam+0xb6>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d003      	beq.n	80034fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034f4:	e018      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      break;
 80034fa:	e015      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e00b      	b.n	8003526 <DMA_CheckFifoParam+0xe6>
      break;
 800350e:	bf00      	nop
 8003510:	e00a      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
 8003514:	e008      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
 8003518:	e006      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      break;
 800351a:	bf00      	nop
 800351c:	e004      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      break;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      break;   
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <DMA_CheckFifoParam+0xe8>
      break;
 8003526:	bf00      	nop
    }
  } 
  
  return status; 
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	@ 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e16b      	b.n	800382c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003554:	2201      	movs	r2, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	f040 815a 	bne.w	8003826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d005      	beq.n	800358a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003586:	2b02      	cmp	r3, #2
 8003588:	d130      	bne.n	80035ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	2203      	movs	r2, #3
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035c0:	2201      	movs	r2, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 0201 	and.w	r2, r3, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d017      	beq.n	8003628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d123      	bne.n	800367c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	220f      	movs	r2, #15
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	69b9      	ldr	r1, [r7, #24]
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80b4 	beq.w	8003826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b60      	ldr	r3, [pc, #384]	@ (8003844 <HAL_GPIO_Init+0x30c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003844 <HAL_GPIO_Init+0x30c>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003844 <HAL_GPIO_Init+0x30c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036da:	4a5b      	ldr	r2, [pc, #364]	@ (8003848 <HAL_GPIO_Init+0x310>)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_GPIO_Init+0x314>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d02b      	beq.n	800375e <HAL_GPIO_Init+0x226>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a51      	ldr	r2, [pc, #324]	@ (8003850 <HAL_GPIO_Init+0x318>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d025      	beq.n	800375a <HAL_GPIO_Init+0x222>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a50      	ldr	r2, [pc, #320]	@ (8003854 <HAL_GPIO_Init+0x31c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01f      	beq.n	8003756 <HAL_GPIO_Init+0x21e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4f      	ldr	r2, [pc, #316]	@ (8003858 <HAL_GPIO_Init+0x320>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d019      	beq.n	8003752 <HAL_GPIO_Init+0x21a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4e      	ldr	r2, [pc, #312]	@ (800385c <HAL_GPIO_Init+0x324>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0x216>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4d      	ldr	r2, [pc, #308]	@ (8003860 <HAL_GPIO_Init+0x328>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00d      	beq.n	800374a <HAL_GPIO_Init+0x212>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4c      	ldr	r2, [pc, #304]	@ (8003864 <HAL_GPIO_Init+0x32c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <HAL_GPIO_Init+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4b      	ldr	r2, [pc, #300]	@ (8003868 <HAL_GPIO_Init+0x330>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_GPIO_Init+0x20a>
 800373e:	2307      	movs	r3, #7
 8003740:	e00e      	b.n	8003760 <HAL_GPIO_Init+0x228>
 8003742:	2308      	movs	r3, #8
 8003744:	e00c      	b.n	8003760 <HAL_GPIO_Init+0x228>
 8003746:	2306      	movs	r3, #6
 8003748:	e00a      	b.n	8003760 <HAL_GPIO_Init+0x228>
 800374a:	2305      	movs	r3, #5
 800374c:	e008      	b.n	8003760 <HAL_GPIO_Init+0x228>
 800374e:	2304      	movs	r3, #4
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x228>
 8003752:	2303      	movs	r3, #3
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x228>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x228>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x228>
 800375e:	2300      	movs	r3, #0
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	f002 0203 	and.w	r2, r2, #3
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	4093      	lsls	r3, r2
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003770:	4935      	ldr	r1, [pc, #212]	@ (8003848 <HAL_GPIO_Init+0x310>)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377e:	4b3b      	ldr	r3, [pc, #236]	@ (800386c <HAL_GPIO_Init+0x334>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a2:	4a32      	ldr	r2, [pc, #200]	@ (800386c <HAL_GPIO_Init+0x334>)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037a8:	4b30      	ldr	r3, [pc, #192]	@ (800386c <HAL_GPIO_Init+0x334>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037cc:	4a27      	ldr	r2, [pc, #156]	@ (800386c <HAL_GPIO_Init+0x334>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d2:	4b26      	ldr	r3, [pc, #152]	@ (800386c <HAL_GPIO_Init+0x334>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f6:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <HAL_GPIO_Init+0x334>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_GPIO_Init+0x334>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003820:	4a12      	ldr	r2, [pc, #72]	@ (800386c <HAL_GPIO_Init+0x334>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3301      	adds	r3, #1
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	f67f ae90 	bls.w	8003554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3724      	adds	r7, #36	@ 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	40013800 	.word	0x40013800
 800384c:	40020000 	.word	0x40020000
 8003850:	40020400 	.word	0x40020400
 8003854:	40020800 	.word	0x40020800
 8003858:	40020c00 	.word	0x40020c00
 800385c:	40021000 	.word	0x40021000
 8003860:	40021400 	.word	0x40021400
 8003864:	40021800 	.word	0x40021800
 8003868:	40021c00 	.word	0x40021c00
 800386c:	40013c00 	.word	0x40013c00

08003870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
 800387c:	4613      	mov	r3, r2
 800387e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800388c:	e003      	b.n	8003896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e12b      	b.n	8003b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe f812 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	@ 0x24
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003908:	f000 fd80 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a81      	ldr	r2, [pc, #516]	@ (8003b18 <HAL_I2C_Init+0x274>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d807      	bhi.n	8003928 <HAL_I2C_Init+0x84>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a80      	ldr	r2, [pc, #512]	@ (8003b1c <HAL_I2C_Init+0x278>)
 800391c:	4293      	cmp	r3, r2
 800391e:	bf94      	ite	ls
 8003920:	2301      	movls	r3, #1
 8003922:	2300      	movhi	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e006      	b.n	8003936 <HAL_I2C_Init+0x92>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b20 <HAL_I2C_Init+0x27c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0e7      	b.n	8003b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a78      	ldr	r2, [pc, #480]	@ (8003b24 <HAL_I2C_Init+0x280>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b18 <HAL_I2C_Init+0x274>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d802      	bhi.n	8003978 <HAL_I2C_Init+0xd4>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3301      	adds	r3, #1
 8003976:	e009      	b.n	800398c <HAL_I2C_Init+0xe8>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	4a69      	ldr	r2, [pc, #420]	@ (8003b28 <HAL_I2C_Init+0x284>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	3301      	adds	r3, #1
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800399e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	495c      	ldr	r1, [pc, #368]	@ (8003b18 <HAL_I2C_Init+0x274>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d819      	bhi.n	80039e0 <HAL_I2C_Init+0x13c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e59      	subs	r1, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039c0:	400b      	ands	r3, r1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_I2C_Init+0x138>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1e59      	subs	r1, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	e051      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 80039dc:	2304      	movs	r3, #4
 80039de:	e04f      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <HAL_I2C_Init+0x168>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e012      	b.n	8003a32 <HAL_I2C_Init+0x18e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Init+0x196>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10e      	bne.n	8003a60 <HAL_I2C_Init+0x1bc>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e58      	subs	r0, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	440b      	add	r3, r1
 8003a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a5e:	e00f      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6809      	ldr	r1, [r1, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6911      	ldr	r1, [r2, #16]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	4311      	orrs	r1, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	000186a0 	.word	0x000186a0
 8003b1c:	001e847f 	.word	0x001e847f
 8003b20:	003d08ff 	.word	0x003d08ff
 8003b24:	431bde83 	.word	0x431bde83
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e267      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d075      	beq.n	8003c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4a:	4b88      	ldr	r3, [pc, #544]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d00c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b85      	ldr	r3, [pc, #532]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d112      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b82      	ldr	r3, [pc, #520]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4b7e      	ldr	r3, [pc, #504]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05b      	beq.n	8003c34 <HAL_RCC_OscConfig+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d157      	bne.n	8003c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e242      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x74>
 8003b92:	4b76      	ldr	r3, [pc, #472]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a75      	ldr	r2, [pc, #468]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e01d      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x98>
 8003baa:	4b70      	ldr	r3, [pc, #448]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6f      	ldr	r2, [pc, #444]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6c      	ldr	r2, [pc, #432]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003bc4:	4b69      	ldr	r3, [pc, #420]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a65      	ldr	r2, [pc, #404]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fb52 	bl	800228c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe fb4e 	bl	800228c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	@ 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e207      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0xc0>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fb3e 	bl	800228c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe fb3a 	bl	800228c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	@ 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1f3      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	4b51      	ldr	r3, [pc, #324]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0xe8>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d063      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c42:	4b4a      	ldr	r3, [pc, #296]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b47      	ldr	r3, [pc, #284]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d11c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b44      	ldr	r3, [pc, #272]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d116      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c66:	4b41      	ldr	r3, [pc, #260]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e1c7      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4937      	ldr	r1, [pc, #220]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	e03a      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c9c:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <HAL_RCC_OscConfig+0x244>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe faf3 	bl	800228c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe faef 	bl	800228c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1a8      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4925      	ldr	r1, [pc, #148]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b24      	ldr	r3, [pc, #144]	@ (8003d70 <HAL_RCC_OscConfig+0x244>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fad2 	bl	800228c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cec:	f7fe face 	bl	800228c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e187      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d036      	beq.n	8003d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1e:	4b15      	ldr	r3, [pc, #84]	@ (8003d74 <HAL_RCC_OscConfig+0x248>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fe fab2 	bl	800228c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe faae 	bl	800228c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e167      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x200>
 8003d4a:	e01b      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <HAL_RCC_OscConfig+0x248>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fa9b 	bl	800228c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	e00e      	b.n	8003d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fa97 	bl	800228c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d907      	bls.n	8003d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e150      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	42470000 	.word	0x42470000
 8003d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	4b88      	ldr	r3, [pc, #544]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ea      	bne.n	8003d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8097 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d96:	4b81      	ldr	r3, [pc, #516]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	4b7d      	ldr	r3, [pc, #500]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	4a7c      	ldr	r2, [pc, #496]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003db2:	4b7a      	ldr	r3, [pc, #488]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b77      	ldr	r3, [pc, #476]	@ (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b74      	ldr	r3, [pc, #464]	@ (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a73      	ldr	r2, [pc, #460]	@ (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fe fa57 	bl	800228c <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fe fa53 	bl	800228c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e10c      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2ea>
 8003e08:	4b64      	ldr	r3, [pc, #400]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a63      	ldr	r2, [pc, #396]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e14:	e01c      	b.n	8003e50 <HAL_RCC_OscConfig+0x324>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x30c>
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	4a5e      	ldr	r2, [pc, #376]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0x324>
 8003e38:	4b58      	ldr	r3, [pc, #352]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3c:	4a57      	ldr	r2, [pc, #348]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e44:	4b55      	ldr	r3, [pc, #340]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	4a54      	ldr	r2, [pc, #336]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0304 	bic.w	r3, r3, #4
 8003e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe fa18 	bl	800228c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fe fa14 	bl	800228c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0cb      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e76:	4b49      	ldr	r3, [pc, #292]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <HAL_RCC_OscConfig+0x334>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e84:	f7fe fa02 	bl	800228c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fe f9fe 	bl	800228c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0b5      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ee      	bne.n	8003e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b39      	ldr	r3, [pc, #228]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	4a38      	ldr	r2, [pc, #224]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a1 	beq.w	800400c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eca:	4b34      	ldr	r3, [pc, #208]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d05c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d141      	bne.n	8003f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b31      	ldr	r3, [pc, #196]	@ (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f9d2 	bl	800228c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe f9ce 	bl	800228c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e087      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	491b      	ldr	r1, [pc, #108]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fe f9a7 	bl	800228c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fe f9a3 	bl	800228c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e05c      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x416>
 8003f60:	e054      	b.n	800400c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe f990 	bl	800228c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe f98c 	bl	800228c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e045      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x444>
 8003f8e:	e03d      	b.n	800400c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e038      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_RCC_OscConfig+0x4ec>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d028      	beq.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d121      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d11a      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d111      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0cc      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004030:	4b68      	ldr	r3, [pc, #416]	@ (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d90c      	bls.n	8004058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b65      	ldr	r3, [pc, #404]	@ (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b63      	ldr	r3, [pc, #396]	@ (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0b8      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004070:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a58      	ldr	r2, [pc, #352]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800407a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004088:	4b53      	ldr	r3, [pc, #332]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a52      	ldr	r2, [pc, #328]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b50      	ldr	r3, [pc, #320]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	494d      	ldr	r1, [pc, #308]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d044      	beq.n	800413c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d119      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e07f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d003      	beq.n	80040da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	4b3f      	ldr	r3, [pc, #252]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e06f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e067      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fa:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4934      	ldr	r1, [pc, #208]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800410c:	f7fe f8be 	bl	800228c <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	e00a      	b.n	800412a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004114:	f7fe f8ba 	bl	800228c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 020c 	and.w	r2, r3, #12
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	429a      	cmp	r2, r3
 800413a:	d1eb      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413c:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d20c      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e032      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4916      	ldr	r1, [pc, #88]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	490e      	ldr	r1, [pc, #56]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a2:	f000 f821 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80041a6:	4602      	mov	r2, r0
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	490a      	ldr	r1, [pc, #40]	@ (80041dc <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	5ccb      	ldrb	r3, [r1, r3]
 80041b6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ba:	4a09      	ldr	r2, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041be:	4b09      	ldr	r3, [pc, #36]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe f81e 	bl	8002204 <HAL_InitTick>

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023c00 	.word	0x40023c00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	0800a558 	.word	0x0800a558
 80041e0:	20000004 	.word	0x20000004
 80041e4:	20000008 	.word	0x20000008

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b094      	sub	sp, #80	@ 0x50
 80041ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f4:	2300      	movs	r3, #0
 80041f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f8:	2300      	movs	r3, #0
 80041fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004200:	4b79      	ldr	r3, [pc, #484]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b08      	cmp	r3, #8
 800420a:	d00d      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x40>
 800420c:	2b08      	cmp	r3, #8
 800420e:	f200 80e1 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x34>
 8004216:	2b04      	cmp	r3, #4
 8004218:	d003      	beq.n	8004222 <HAL_RCC_GetSysClockFreq+0x3a>
 800421a:	e0db      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b73      	ldr	r3, [pc, #460]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x204>)
 800421e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004220:	e0db      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004222:	4b73      	ldr	r3, [pc, #460]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004226:	e0d8      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004228:	4b6f      	ldr	r3, [pc, #444]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004230:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004232:	4b6d      	ldr	r3, [pc, #436]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d063      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423e:	4b6a      	ldr	r3, [pc, #424]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	2200      	movs	r2, #0
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004250:	633b      	str	r3, [r7, #48]	@ 0x30
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
 8004256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	f04f 0000 	mov.w	r0, #0
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	0159      	lsls	r1, r3, #5
 8004268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800426c:	0150      	lsls	r0, r2, #5
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4621      	mov	r1, r4
 8004274:	1a51      	subs	r1, r2, r1
 8004276:	6139      	str	r1, [r7, #16]
 8004278:	4629      	mov	r1, r5
 800427a:	eb63 0301 	sbc.w	r3, r3, r1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800428c:	4659      	mov	r1, fp
 800428e:	018b      	lsls	r3, r1, #6
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004296:	4651      	mov	r1, sl
 8004298:	018a      	lsls	r2, r1, #6
 800429a:	4651      	mov	r1, sl
 800429c:	ebb2 0801 	subs.w	r8, r2, r1
 80042a0:	4659      	mov	r1, fp
 80042a2:	eb63 0901 	sbc.w	r9, r3, r1
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ba:	4690      	mov	r8, r2
 80042bc:	4699      	mov	r9, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	eb18 0303 	adds.w	r3, r8, r3
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	462b      	mov	r3, r5
 80042c8:	eb49 0303 	adc.w	r3, r9, r3
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042da:	4629      	mov	r1, r5
 80042dc:	024b      	lsls	r3, r1, #9
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e4:	4621      	mov	r1, r4
 80042e6:	024a      	lsls	r2, r1, #9
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ee:	2200      	movs	r2, #0
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042f8:	f7fb ffc2 	bl	8000280 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4613      	mov	r3, r2
 8004302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004304:	e058      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b38      	ldr	r3, [pc, #224]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	2200      	movs	r2, #0
 800430e:	4618      	mov	r0, r3
 8004310:	4611      	mov	r1, r2
 8004312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
 800431c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	f04f 0000 	mov.w	r0, #0
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	0159      	lsls	r1, r3, #5
 800432e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004332:	0150      	lsls	r0, r2, #5
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4641      	mov	r1, r8
 800433a:	ebb2 0a01 	subs.w	sl, r2, r1
 800433e:	4649      	mov	r1, r9
 8004340:	eb63 0b01 	sbc.w	fp, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004358:	ebb2 040a 	subs.w	r4, r2, sl
 800435c:	eb63 050b 	sbc.w	r5, r3, fp
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	00eb      	lsls	r3, r5, #3
 800436a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436e:	00e2      	lsls	r2, r4, #3
 8004370:	4614      	mov	r4, r2
 8004372:	461d      	mov	r5, r3
 8004374:	4643      	mov	r3, r8
 8004376:	18e3      	adds	r3, r4, r3
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	464b      	mov	r3, r9
 800437c:	eb45 0303 	adc.w	r3, r5, r3
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800438e:	4629      	mov	r1, r5
 8004390:	028b      	lsls	r3, r1, #10
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004398:	4621      	mov	r1, r4
 800439a:	028a      	lsls	r2, r1, #10
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043a2:	2200      	movs	r2, #0
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	61fa      	str	r2, [r7, #28]
 80043a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ac:	f7fb ff68 	bl	8000280 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80043c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x204>)
 80043d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3750      	adds	r7, #80	@ 0x50
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	@ (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000004 	.word	0x20000004

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	@ (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	@ (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	0800a568 	.word	0x0800a568

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004438:	f7ff ffdc 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0b5b      	lsrs	r3, r3, #13
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	0800a568 	.word	0x0800a568

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07b      	b.n	8004566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fa68 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004518:	ea42 0103 	orr.w	r1, r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0104 	and.w	r1, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	f003 0210 	and.w	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e034      	b.n	80045ee <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7fd fb9f 	bl	8001cdc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3308      	adds	r3, #8
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f002 f84d 	bl	8006648 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	f002 f897 	bl	80066ec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6858      	ldr	r0, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	f002 f8cc 	bl	8006768 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	6892      	ldr	r2, [r2, #8]
 80045d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	6892      	ldr	r2, [r2, #8]
 80045e4:	f041 0101 	orr.w	r1, r1, #1
 80045e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e041      	b.n	800468c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fd f9f9 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f000 fc19 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e046      	b.n	800473a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <HAL_TIM_Base_Start+0xb4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d01d      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1f      	ldr	r2, [pc, #124]	@ (800474c <HAL_TIM_Base_Start+0xb8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004750 <HAL_TIM_Base_Start+0xbc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004754 <HAL_TIM_Base_Start+0xc0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <HAL_TIM_Base_Start+0xc4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	@ (800475c <HAL_TIM_Base_Start+0xc8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start+0x70>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_TIM_Base_Start+0xcc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d010      	beq.n	8004738 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	e007      	b.n	8004738 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800

08004764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04e      	b.n	800481a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a23      	ldr	r2, [pc, #140]	@ (8004828 <HAL_TIM_Base_Start_IT+0xc4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d022      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a6:	d01d      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	@ (800482c <HAL_TIM_Base_Start_IT+0xc8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_TIM_Base_Start_IT+0xcc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <HAL_TIM_Base_Start_IT+0xd0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <HAL_TIM_Base_Start_IT+0xd4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a19      	ldr	r2, [pc, #100]	@ (800483c <HAL_TIM_Base_Start_IT+0xd8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <HAL_TIM_Base_Start_IT+0xdc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d010      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e007      	b.n	8004818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40001800 	.word	0x40001800

08004844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e041      	b.n	80048da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f839 	bl	80048e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 faf2 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d122      	bne.n	8004952 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d11b      	bne.n	8004952 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0202 	mvn.w	r2, #2
 8004922:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa78 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 800493e:	e005      	b.n	800494c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa6a 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fa7b 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d122      	bne.n	80049a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d11b      	bne.n	80049a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0204 	mvn.w	r2, #4
 8004976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fa4e 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004992:	e005      	b.n	80049a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa40 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa51 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d122      	bne.n	80049fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d11b      	bne.n	80049fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0208 	mvn.w	r2, #8
 80049ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2204      	movs	r2, #4
 80049d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fa24 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 80049e6:	e005      	b.n	80049f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa16 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa27 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d122      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d11b      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0210 	mvn.w	r2, #16
 8004a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2208      	movs	r2, #8
 8004a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9fa 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e005      	b.n	8004a48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9ec 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9fd 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10e      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0201 	mvn.w	r2, #1
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fe05 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a84:	2b80      	cmp	r3, #128	@ 0x80
 8004a86:	d10e      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a92:	2b80      	cmp	r3, #128	@ 0x80
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fd53 	bl	800554c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab0:	2b40      	cmp	r3, #64	@ 0x40
 8004ab2:	d10e      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d107      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f9c2 	bl	8004e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d10e      	bne.n	8004afe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d107      	bne.n	8004afe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0220 	mvn.w	r2, #32
 8004af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fd1d 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0ae      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	f200 809f 	bhi.w	8004c74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004c75 	.word	0x08004c75
 8004b44:	08004c75 	.word	0x08004c75
 8004b48:	08004c75 	.word	0x08004c75
 8004b4c:	08004bb1 	.word	0x08004bb1
 8004b50:	08004c75 	.word	0x08004c75
 8004b54:	08004c75 	.word	0x08004c75
 8004b58:	08004c75 	.word	0x08004c75
 8004b5c:	08004bf3 	.word	0x08004bf3
 8004b60:	08004c75 	.word	0x08004c75
 8004b64:	08004c75 	.word	0x08004c75
 8004b68:	08004c75 	.word	0x08004c75
 8004b6c:	08004c33 	.word	0x08004c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa18 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e064      	b.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa68 	bl	800508c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e043      	b.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fabd 	bl	8005178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e023      	b.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fb11 	bl	8005260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
      break;
 8004c78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e0b4      	b.n	8004e12 <HAL_TIM_ConfigClockSource+0x186>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce0:	d03e      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce6:	f200 8087 	bhi.w	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	f000 8086 	beq.w	8004dfe <HAL_TIM_ConfigClockSource+0x172>
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf6:	d87f      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d01a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xa6>
 8004cfc:	2b70      	cmp	r3, #112	@ 0x70
 8004cfe:	d87b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b60      	cmp	r3, #96	@ 0x60
 8004d02:	d050      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x11a>
 8004d04:	2b60      	cmp	r3, #96	@ 0x60
 8004d06:	d877      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b50      	cmp	r3, #80	@ 0x50
 8004d0a:	d03c      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0xfa>
 8004d0c:	2b50      	cmp	r3, #80	@ 0x50
 8004d0e:	d873      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d058      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d86f      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b30      	cmp	r3, #48	@ 0x30
 8004d1a:	d064      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	2b30      	cmp	r3, #48	@ 0x30
 8004d1e:	d86b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d060      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d867      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d05c      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d05a      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d30:	e062      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6899      	ldr	r1, [r3, #8]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f000 fb5d 	bl	8005400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	609a      	str	r2, [r3, #8]
      break;
 8004d5e:	e04f      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6899      	ldr	r1, [r3, #8]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f000 fb46 	bl	8005400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d82:	609a      	str	r2, [r3, #8]
      break;
 8004d84:	e03c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 faba 	bl	800530c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2150      	movs	r1, #80	@ 0x50
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fb13 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 8004da4:	e02c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 fad9 	bl	800536a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2160      	movs	r1, #96	@ 0x60
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb03 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e01c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 fa9a 	bl	800530c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2140      	movs	r1, #64	@ 0x40
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 faf3 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 8004de4:	e00c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f000 faea 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 8004df6:	e003      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a40      	ldr	r2, [pc, #256]	@ (8004f80 <TIM_Base_SetConfig+0x114>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8a:	d00f      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f84 <TIM_Base_SetConfig+0x118>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3c      	ldr	r2, [pc, #240]	@ (8004f88 <TIM_Base_SetConfig+0x11c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8004f8c <TIM_Base_SetConfig+0x120>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8004f90 <TIM_Base_SetConfig+0x124>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8004f80 <TIM_Base_SetConfig+0x114>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ecc:	d027      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <TIM_Base_SetConfig+0x118>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d023      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <TIM_Base_SetConfig+0x11c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f8c <TIM_Base_SetConfig+0x120>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a29      	ldr	r2, [pc, #164]	@ (8004f90 <TIM_Base_SetConfig+0x124>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d017      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a28      	ldr	r2, [pc, #160]	@ (8004f94 <TIM_Base_SetConfig+0x128>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a27      	ldr	r2, [pc, #156]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a26      	ldr	r2, [pc, #152]	@ (8004f9c <TIM_Base_SetConfig+0x130>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a25      	ldr	r2, [pc, #148]	@ (8004fa0 <TIM_Base_SetConfig+0x134>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a24      	ldr	r2, [pc, #144]	@ (8004fa4 <TIM_Base_SetConfig+0x138>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a23      	ldr	r2, [pc, #140]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a0a      	ldr	r2, [pc, #40]	@ (8004f80 <TIM_Base_SetConfig+0x114>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f90 <TIM_Base_SetConfig+0x124>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d103      	bne.n	8004f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	615a      	str	r2, [r3, #20]
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800
 8004fa0:	40001800 	.word	0x40001800
 8004fa4:	40001c00 	.word	0x40001c00
 8004fa8:	40002000 	.word	0x40002000

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a20      	ldr	r2, [pc, #128]	@ (8005084 <TIM_OC1_SetConfig+0xd8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC1_SetConfig+0x64>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <TIM_OC1_SetConfig+0xdc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10c      	bne.n	800502a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0308 	bic.w	r3, r3, #8
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a15      	ldr	r2, [pc, #84]	@ (8005084 <TIM_OC1_SetConfig+0xd8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC1_SetConfig+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a14      	ldr	r2, [pc, #80]	@ (8005088 <TIM_OC1_SetConfig+0xdc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d111      	bne.n	800505e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400

0800508c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0210 	bic.w	r2, r3, #16
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0320 	bic.w	r3, r3, #32
 80050d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a22      	ldr	r2, [pc, #136]	@ (8005170 <TIM_OC2_SetConfig+0xe4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC2_SetConfig+0x68>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a21      	ldr	r2, [pc, #132]	@ (8005174 <TIM_OC2_SetConfig+0xe8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10d      	bne.n	8005110 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800510e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <TIM_OC2_SetConfig+0xe4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC2_SetConfig+0x94>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a16      	ldr	r2, [pc, #88]	@ (8005174 <TIM_OC2_SetConfig+0xe8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d113      	bne.n	8005148 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400

08005178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a21      	ldr	r2, [pc, #132]	@ (8005258 <TIM_OC3_SetConfig+0xe0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_OC3_SetConfig+0x66>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a20      	ldr	r2, [pc, #128]	@ (800525c <TIM_OC3_SetConfig+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10d      	bne.n	80051fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a16      	ldr	r2, [pc, #88]	@ (8005258 <TIM_OC3_SetConfig+0xe0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC3_SetConfig+0x92>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a15      	ldr	r2, [pc, #84]	@ (800525c <TIM_OC3_SetConfig+0xe4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d113      	bne.n	8005232 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40010000 	.word	0x40010000
 800525c:	40010400 	.word	0x40010400

08005260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a12      	ldr	r2, [pc, #72]	@ (8005304 <TIM_OC4_SetConfig+0xa4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC4_SetConfig+0x68>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a11      	ldr	r2, [pc, #68]	@ (8005308 <TIM_OC4_SetConfig+0xa8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d109      	bne.n	80052dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	019b      	lsls	r3, r3, #6
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40010400 	.word	0x40010400

0800530c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 030a 	bic.w	r3, r3, #10
 8005348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0210 	bic.w	r2, r3, #16
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	031b      	lsls	r3, r3, #12
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f043 0307 	orr.w	r3, r3, #7
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800541a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e05a      	b.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a21      	ldr	r2, [pc, #132]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1a      	ldr	r2, [pc, #104]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a18      	ldr	r2, [pc, #96]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a17      	ldr	r2, [pc, #92]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10c      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40000c00 	.word	0x40000c00
 800552c:	40010400 	.word	0x40010400
 8005530:	40014000 	.word	0x40014000
 8005534:	40001800 	.word	0x40001800

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e03f      	b.n	80055f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fc fad0 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2224      	movs	r2, #36	@ 0x24
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fddb 	bl	8006160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b08a      	sub	sp, #40	@ 0x28
 80055fe:	af02      	add	r7, sp, #8
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b20      	cmp	r3, #32
 8005618:	d17c      	bne.n	8005714 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_Transmit+0x2c>
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e075      	b.n	8005716 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_UART_Transmit+0x3e>
 8005634:	2302      	movs	r3, #2
 8005636:	e06e      	b.n	8005716 <HAL_UART_Transmit+0x11c>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2221      	movs	r2, #33	@ 0x21
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564e:	f7fc fe1d 	bl	800228c <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x82>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800568c:	e02a      	b.n	80056e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	@ 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fb1f 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e036      	b.n	8005716 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	3302      	adds	r3, #2
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e007      	b.n	80056d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1cf      	bne.n	800568e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2140      	movs	r1, #64	@ 0x40
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 faef 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	4613      	mov	r3, r2
 800572a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b20      	cmp	r3, #32
 8005736:	d11d      	bne.n	8005774 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_Receive_IT+0x26>
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e016      	b.n	8005776 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_UART_Receive_IT+0x38>
 8005752:	2302      	movs	r3, #2
 8005754:	e00f      	b.n	8005776 <HAL_UART_Receive_IT+0x58>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	461a      	mov	r2, r3
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fb24 	bl	8005db8 <UART_Start_Receive_IT>
 8005770:	4603      	mov	r3, r0
 8005772:	e000      	b.n	8005776 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b0ba      	sub	sp, #232	@ 0xe8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_UART_IRQHandler+0x66>
 80057d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fc03 	bl	8005fea <UART_Receive_IT>
      return;
 80057e4:	e256      	b.n	8005c94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80de 	beq.w	80059ac <HAL_UART_IRQHandler+0x22c>
 80057f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005800:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80d1 	beq.w	80059ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <HAL_UART_IRQHandler+0xae>
 8005816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800581a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	f043 0201 	orr.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <HAL_UART_IRQHandler+0xd2>
 800583a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	f043 0202 	orr.w	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_UART_IRQHandler+0xf6>
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f043 0204 	orr.w	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d011      	beq.n	80058a6 <HAL_UART_IRQHandler+0x126>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d105      	bne.n	800589a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800588e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	f043 0208 	orr.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 81ed 	beq.w	8005c8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_UART_IRQHandler+0x14e>
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fb8e 	bl	8005fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <HAL_UART_IRQHandler+0x17a>
 80058f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04f      	beq.n	800599a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa96 	bl	8005e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590a:	2b40      	cmp	r3, #64	@ 0x40
 800590c:	d141      	bne.n	8005992 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800593a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800593e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1d9      	bne.n	800590e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595e:	2b00      	cmp	r3, #0
 8005960:	d013      	beq.n	800598a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005966:	4a7d      	ldr	r2, [pc, #500]	@ (8005b5c <HAL_UART_IRQHandler+0x3dc>)
 8005968:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596e:	4618      	mov	r0, r3
 8005970:	f7fd fb56 	bl	8003020 <HAL_DMA_Abort_IT>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005984:	4610      	mov	r0, r2
 8005986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e00e      	b.n	80059a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f990 	bl	8005cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e00a      	b.n	80059a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f98c 	bl	8005cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e006      	b.n	80059a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f988 	bl	8005cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80059a6:	e170      	b.n	8005c8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	bf00      	nop
    return;
 80059aa:	e16e      	b.n	8005c8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	f040 814a 	bne.w	8005c4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8143 	beq.w	8005c4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 813c 	beq.w	8005c4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f2:	2b40      	cmp	r3, #64	@ 0x40
 80059f4:	f040 80b4 	bne.w	8005b60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8140 	beq.w	8005c8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a16:	429a      	cmp	r2, r3
 8005a18:	f080 8139 	bcs.w	8005c8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a2e:	f000 8088 	beq.w	8005b42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1d9      	bne.n	8005a32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005aa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e1      	bne.n	8005a7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ade:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ae4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e3      	bne.n	8005aba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e3      	bne.n	8005b00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fd f9ff 	bl	8002f40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8b6 	bl	8005cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b58:	e099      	b.n	8005c8e <HAL_UART_IRQHandler+0x50e>
 8005b5a:	bf00      	nop
 8005b5c:	08005ef3 	.word	0x08005ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 808b 	beq.w	8005c92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8086 	beq.w	8005c92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e3      	bne.n	8005b86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3314      	adds	r3, #20
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e3      	bne.n	8005bbe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0310 	bic.w	r3, r3, #16
 8005c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c28:	61fa      	str	r2, [r7, #28]
 8005c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	617b      	str	r3, [r7, #20]
   return(result);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e3      	bne.n	8005c04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f83e 	bl	8005cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c48:	e023      	b.n	8005c92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_UART_IRQHandler+0x4ea>
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f959 	bl	8005f1a <UART_Transmit_IT>
    return;
 8005c68:	e014      	b.n	8005c94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00e      	beq.n	8005c94 <HAL_UART_IRQHandler+0x514>
 8005c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f999 	bl	8005fba <UART_EndTransmit_IT>
    return;
 8005c88:	e004      	b.n	8005c94 <HAL_UART_IRQHandler+0x514>
    return;
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <HAL_UART_IRQHandler+0x514>
      return;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_UART_IRQHandler+0x514>
      return;
 8005c92:	bf00      	nop
  }
}
 8005c94:	37e8      	adds	r7, #232	@ 0xe8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop

08005c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b090      	sub	sp, #64	@ 0x40
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cec:	e050      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d04c      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005cfc:	f7fc fac6 	bl	800228c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d241      	bcs.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d2c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e5      	bne.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d60:	623a      	str	r2, [r7, #32]
 8005d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69f9      	ldr	r1, [r7, #28]
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e00f      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d09f      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3740      	adds	r7, #64	@ 0x40
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2222      	movs	r2, #34	@ 0x22
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b095      	sub	sp, #84	@ 0x54
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e54:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e5      	bne.n	8005e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d119      	bne.n	8005ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ec4:	61ba      	str	r2, [r7, #24]
 8005ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e5      	bne.n	8005ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ee6:	bf00      	nop
 8005ee8:	3754      	adds	r7, #84	@ 0x54
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fecf 	bl	8005cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b21      	cmp	r3, #33	@ 0x21
 8005f2c:	d13e      	bne.n	8005fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f36:	d114      	bne.n	8005f62 <UART_Transmit_IT+0x48>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d110      	bne.n	8005f62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]
 8005f60:	e008      	b.n	8005f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	1c59      	adds	r1, r3, #1
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6211      	str	r1, [r2, #32]
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4619      	mov	r1, r3
 8005f82:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10f      	bne.n	8005fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fe5e 	bl	8005c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b08c      	sub	sp, #48	@ 0x30
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b22      	cmp	r3, #34	@ 0x22
 8005ffc:	f040 80ab 	bne.w	8006156 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006008:	d117      	bne.n	800603a <UART_Receive_IT+0x50>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d113      	bne.n	800603a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	b29a      	uxth	r2, r3
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	@ 0x28
 8006038:	e026      	b.n	8006088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604c:	d007      	beq.n	800605e <UART_Receive_IT+0x74>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <UART_Receive_IT+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e008      	b.n	800607e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006078:	b2da      	uxtb	r2, r3
 800607a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4619      	mov	r1, r3
 8006096:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006098:	2b00      	cmp	r3, #0
 800609a:	d15a      	bne.n	8006152 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0220 	bic.w	r2, r2, #32
 80060aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0201 	bic.w	r2, r2, #1
 80060ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d135      	bne.n	8006148 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	613b      	str	r3, [r7, #16]
   return(result);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006102:	623a      	str	r2, [r7, #32]
 8006104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	69f9      	ldr	r1, [r7, #28]
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b10      	cmp	r3, #16
 8006122:	d10a      	bne.n	800613a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fdbf 	bl	8005cc4 <HAL_UARTEx_RxEventCallback>
 8006146:	e002      	b.n	800614e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb ff83 	bl	8002054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e002      	b.n	8006158 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	@ 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006164:	b0c0      	sub	sp, #256	@ 0x100
 8006166:	af00      	add	r7, sp, #0
 8006168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617c:	68d9      	ldr	r1, [r3, #12]
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	ea40 0301 	orr.w	r3, r0, r1
 8006188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	431a      	orrs	r2, r3
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	431a      	orrs	r2, r3
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061b8:	f021 010c 	bic.w	r1, r1, #12
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061c6:	430b      	orrs	r3, r1
 80061c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	6999      	ldr	r1, [r3, #24]
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	ea40 0301 	orr.w	r3, r0, r1
 80061e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b8f      	ldr	r3, [pc, #572]	@ (800642c <UART_SetConfig+0x2cc>)
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d005      	beq.n	8006200 <UART_SetConfig+0xa0>
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006430 <UART_SetConfig+0x2d0>)
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d104      	bne.n	800620a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006200:	f7fe f918 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 8006204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006208:	e003      	b.n	8006212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800620a:	f7fe f8ff 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 800620e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800621c:	f040 810c 	bne.w	8006438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006224:	2200      	movs	r2, #0
 8006226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800622a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800622e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	1891      	adds	r1, r2, r2
 8006238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800623a:	415b      	adcs	r3, r3
 800623c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800623e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006242:	4621      	mov	r1, r4
 8006244:	eb12 0801 	adds.w	r8, r2, r1
 8006248:	4629      	mov	r1, r5
 800624a:	eb43 0901 	adc.w	r9, r3, r1
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800625a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800625e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006262:	4690      	mov	r8, r2
 8006264:	4699      	mov	r9, r3
 8006266:	4623      	mov	r3, r4
 8006268:	eb18 0303 	adds.w	r3, r8, r3
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006270:	462b      	mov	r3, r5
 8006272:	eb49 0303 	adc.w	r3, r9, r3
 8006276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800628a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800628e:	460b      	mov	r3, r1
 8006290:	18db      	adds	r3, r3, r3
 8006292:	653b      	str	r3, [r7, #80]	@ 0x50
 8006294:	4613      	mov	r3, r2
 8006296:	eb42 0303 	adc.w	r3, r2, r3
 800629a:	657b      	str	r3, [r7, #84]	@ 0x54
 800629c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062a4:	f7f9 ffec 	bl	8000280 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4b61      	ldr	r3, [pc, #388]	@ (8006434 <UART_SetConfig+0x2d4>)
 80062ae:	fba3 2302 	umull	r2, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	011c      	lsls	r4, r3, #4
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062d0:	415b      	adcs	r3, r3
 80062d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062d8:	4641      	mov	r1, r8
 80062da:	eb12 0a01 	adds.w	sl, r2, r1
 80062de:	4649      	mov	r1, r9
 80062e0:	eb43 0b01 	adc.w	fp, r3, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f8:	4692      	mov	sl, r2
 80062fa:	469b      	mov	fp, r3
 80062fc:	4643      	mov	r3, r8
 80062fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006306:	464b      	mov	r3, r9
 8006308:	eb4b 0303 	adc.w	r3, fp, r3
 800630c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800631c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006324:	460b      	mov	r3, r1
 8006326:	18db      	adds	r3, r3, r3
 8006328:	643b      	str	r3, [r7, #64]	@ 0x40
 800632a:	4613      	mov	r3, r2
 800632c:	eb42 0303 	adc.w	r3, r2, r3
 8006330:	647b      	str	r3, [r7, #68]	@ 0x44
 8006332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800633a:	f7f9 ffa1 	bl	8000280 <__aeabi_uldivmod>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4611      	mov	r1, r2
 8006344:	4b3b      	ldr	r3, [pc, #236]	@ (8006434 <UART_SetConfig+0x2d4>)
 8006346:	fba3 2301 	umull	r2, r3, r3, r1
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2264      	movs	r2, #100	@ 0x64
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	1acb      	subs	r3, r1, r3
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800635a:	4b36      	ldr	r3, [pc, #216]	@ (8006434 <UART_SetConfig+0x2d4>)
 800635c:	fba3 2302 	umull	r2, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006368:	441c      	add	r4, r3
 800636a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	1891      	adds	r1, r2, r2
 8006382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006384:	415b      	adcs	r3, r3
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800638c:	4641      	mov	r1, r8
 800638e:	1851      	adds	r1, r2, r1
 8006390:	6339      	str	r1, [r7, #48]	@ 0x30
 8006392:	4649      	mov	r1, r9
 8006394:	414b      	adcs	r3, r1
 8006396:	637b      	str	r3, [r7, #52]	@ 0x34
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063a4:	4659      	mov	r1, fp
 80063a6:	00cb      	lsls	r3, r1, #3
 80063a8:	4651      	mov	r1, sl
 80063aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ae:	4651      	mov	r1, sl
 80063b0:	00ca      	lsls	r2, r1, #3
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	4642      	mov	r2, r8
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063c0:	464b      	mov	r3, r9
 80063c2:	460a      	mov	r2, r1
 80063c4:	eb42 0303 	adc.w	r3, r2, r3
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063e0:	460b      	mov	r3, r1
 80063e2:	18db      	adds	r3, r3, r3
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e6:	4613      	mov	r3, r2
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063f6:	f7f9 ff43 	bl	8000280 <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <UART_SetConfig+0x2d4>)
 8006400:	fba3 1302 	umull	r1, r3, r3, r2
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	2164      	movs	r1, #100	@ 0x64
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	3332      	adds	r3, #50	@ 0x32
 8006412:	4a08      	ldr	r2, [pc, #32]	@ (8006434 <UART_SetConfig+0x2d4>)
 8006414:	fba2 2303 	umull	r2, r3, r2, r3
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	f003 0207 	and.w	r2, r3, #7
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4422      	add	r2, r4
 8006426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006428:	e106      	b.n	8006638 <UART_SetConfig+0x4d8>
 800642a:	bf00      	nop
 800642c:	40011000 	.word	0x40011000
 8006430:	40011400 	.word	0x40011400
 8006434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800643c:	2200      	movs	r2, #0
 800643e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800644a:	4642      	mov	r2, r8
 800644c:	464b      	mov	r3, r9
 800644e:	1891      	adds	r1, r2, r2
 8006450:	6239      	str	r1, [r7, #32]
 8006452:	415b      	adcs	r3, r3
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
 8006456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800645a:	4641      	mov	r1, r8
 800645c:	1854      	adds	r4, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb43 0501 	adc.w	r5, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	00eb      	lsls	r3, r5, #3
 800646e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006472:	00e2      	lsls	r2, r4, #3
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	4643      	mov	r3, r8
 800647a:	18e3      	adds	r3, r4, r3
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006480:	464b      	mov	r3, r9
 8006482:	eb45 0303 	adc.w	r3, r5, r3
 8006486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064a6:	4629      	mov	r1, r5
 80064a8:	008b      	lsls	r3, r1, #2
 80064aa:	4621      	mov	r1, r4
 80064ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b0:	4621      	mov	r1, r4
 80064b2:	008a      	lsls	r2, r1, #2
 80064b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064b8:	f7f9 fee2 	bl	8000280 <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4b60      	ldr	r3, [pc, #384]	@ (8006644 <UART_SetConfig+0x4e4>)
 80064c2:	fba3 2302 	umull	r2, r3, r3, r2
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	011c      	lsls	r4, r3, #4
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	61b9      	str	r1, [r7, #24]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6139      	str	r1, [r7, #16]
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006520:	464b      	mov	r3, r9
 8006522:	460a      	mov	r2, r1
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006544:	4649      	mov	r1, r9
 8006546:	008b      	lsls	r3, r1, #2
 8006548:	4641      	mov	r1, r8
 800654a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654e:	4641      	mov	r1, r8
 8006550:	008a      	lsls	r2, r1, #2
 8006552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006556:	f7f9 fe93 	bl	8000280 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4611      	mov	r1, r2
 8006560:	4b38      	ldr	r3, [pc, #224]	@ (8006644 <UART_SetConfig+0x4e4>)
 8006562:	fba3 2301 	umull	r2, r3, r3, r1
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2264      	movs	r2, #100	@ 0x64
 800656a:	fb02 f303 	mul.w	r3, r2, r3
 800656e:	1acb      	subs	r3, r1, r3
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	3332      	adds	r3, #50	@ 0x32
 8006574:	4a33      	ldr	r2, [pc, #204]	@ (8006644 <UART_SetConfig+0x4e4>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006580:	441c      	add	r4, r3
 8006582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006586:	2200      	movs	r2, #0
 8006588:	673b      	str	r3, [r7, #112]	@ 0x70
 800658a:	677a      	str	r2, [r7, #116]	@ 0x74
 800658c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	1891      	adds	r1, r2, r2
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	415b      	adcs	r3, r3
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065a0:	4641      	mov	r1, r8
 80065a2:	1851      	adds	r1, r2, r1
 80065a4:	6039      	str	r1, [r7, #0]
 80065a6:	4649      	mov	r1, r9
 80065a8:	414b      	adcs	r3, r1
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065b8:	4659      	mov	r1, fp
 80065ba:	00cb      	lsls	r3, r1, #3
 80065bc:	4651      	mov	r1, sl
 80065be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c2:	4651      	mov	r1, sl
 80065c4:	00ca      	lsls	r2, r1, #3
 80065c6:	4610      	mov	r0, r2
 80065c8:	4619      	mov	r1, r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	4642      	mov	r2, r8
 80065ce:	189b      	adds	r3, r3, r2
 80065d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065d2:	464b      	mov	r3, r9
 80065d4:	460a      	mov	r2, r1
 80065d6:	eb42 0303 	adc.w	r3, r2, r3
 80065da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065f4:	4649      	mov	r1, r9
 80065f6:	008b      	lsls	r3, r1, #2
 80065f8:	4641      	mov	r1, r8
 80065fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fe:	4641      	mov	r1, r8
 8006600:	008a      	lsls	r2, r1, #2
 8006602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006606:	f7f9 fe3b 	bl	8000280 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <UART_SetConfig+0x4e4>)
 8006610:	fba3 1302 	umull	r1, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2164      	movs	r1, #100	@ 0x64
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	3332      	adds	r3, #50	@ 0x32
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <UART_SetConfig+0x4e4>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 020f 	and.w	r2, r3, #15
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4422      	add	r2, r4
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800663e:	46bd      	mov	sp, r7
 8006640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006644:	51eb851f 	.word	0x51eb851f

08006648 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006660:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <FSMC_NORSRAM_Init+0xa0>)
 8006666:	4013      	ands	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006672:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006678:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800667e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006684:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800668a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006690:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006696:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800669c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80066a2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80066a8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80066ae:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80066b4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d103      	bne.n	80066cc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ca:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	fff00080 	.word	0xfff00080

080066ec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800670e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800671a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006722:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800672a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	3b01      	subs	r3, #1
 8006732:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006734:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	3b02      	subs	r3, #2
 800673c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800673e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006744:	4313      	orrs	r3, r2
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006780:	d122      	bne.n	80067c8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006790:	4013      	ands	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800679e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80067a6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80067ae:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80067b4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80067c6:	e005      	b.n	80067d4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80067d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	cff00000 	.word	0xcff00000

080067e8 <siprintf>:
 80067e8:	b40e      	push	{r1, r2, r3}
 80067ea:	b500      	push	{lr}
 80067ec:	b09c      	sub	sp, #112	@ 0x70
 80067ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80067f0:	9002      	str	r0, [sp, #8]
 80067f2:	9006      	str	r0, [sp, #24]
 80067f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067f8:	4809      	ldr	r0, [pc, #36]	@ (8006820 <siprintf+0x38>)
 80067fa:	9107      	str	r1, [sp, #28]
 80067fc:	9104      	str	r1, [sp, #16]
 80067fe:	4909      	ldr	r1, [pc, #36]	@ (8006824 <siprintf+0x3c>)
 8006800:	f853 2b04 	ldr.w	r2, [r3], #4
 8006804:	9105      	str	r1, [sp, #20]
 8006806:	6800      	ldr	r0, [r0, #0]
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	a902      	add	r1, sp, #8
 800680c:	f000 f994 	bl	8006b38 <_svfiprintf_r>
 8006810:	9b02      	ldr	r3, [sp, #8]
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	b01c      	add	sp, #112	@ 0x70
 8006818:	f85d eb04 	ldr.w	lr, [sp], #4
 800681c:	b003      	add	sp, #12
 800681e:	4770      	bx	lr
 8006820:	20000010 	.word	0x20000010
 8006824:	ffff0208 	.word	0xffff0208

08006828 <memset>:
 8006828:	4402      	add	r2, r0
 800682a:	4603      	mov	r3, r0
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	f803 1b01 	strb.w	r1, [r3], #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <__errno>:
 8006838:	4b01      	ldr	r3, [pc, #4]	@ (8006840 <__errno+0x8>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000010 	.word	0x20000010

08006844 <__libc_init_array>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	4d0d      	ldr	r5, [pc, #52]	@ (800687c <__libc_init_array+0x38>)
 8006848:	4c0d      	ldr	r4, [pc, #52]	@ (8006880 <__libc_init_array+0x3c>)
 800684a:	1b64      	subs	r4, r4, r5
 800684c:	10a4      	asrs	r4, r4, #2
 800684e:	2600      	movs	r6, #0
 8006850:	42a6      	cmp	r6, r4
 8006852:	d109      	bne.n	8006868 <__libc_init_array+0x24>
 8006854:	4d0b      	ldr	r5, [pc, #44]	@ (8006884 <__libc_init_array+0x40>)
 8006856:	4c0c      	ldr	r4, [pc, #48]	@ (8006888 <__libc_init_array+0x44>)
 8006858:	f000 fc66 	bl	8007128 <_init>
 800685c:	1b64      	subs	r4, r4, r5
 800685e:	10a4      	asrs	r4, r4, #2
 8006860:	2600      	movs	r6, #0
 8006862:	42a6      	cmp	r6, r4
 8006864:	d105      	bne.n	8006872 <__libc_init_array+0x2e>
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	f855 3b04 	ldr.w	r3, [r5], #4
 800686c:	4798      	blx	r3
 800686e:	3601      	adds	r6, #1
 8006870:	e7ee      	b.n	8006850 <__libc_init_array+0xc>
 8006872:	f855 3b04 	ldr.w	r3, [r5], #4
 8006876:	4798      	blx	r3
 8006878:	3601      	adds	r6, #1
 800687a:	e7f2      	b.n	8006862 <__libc_init_array+0x1e>
 800687c:	0800a5b4 	.word	0x0800a5b4
 8006880:	0800a5b4 	.word	0x0800a5b4
 8006884:	0800a5b4 	.word	0x0800a5b4
 8006888:	0800a5b8 	.word	0x0800a5b8

0800688c <__retarget_lock_acquire_recursive>:
 800688c:	4770      	bx	lr

0800688e <__retarget_lock_release_recursive>:
 800688e:	4770      	bx	lr

08006890 <_free_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4605      	mov	r5, r0
 8006894:	2900      	cmp	r1, #0
 8006896:	d041      	beq.n	800691c <_free_r+0x8c>
 8006898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689c:	1f0c      	subs	r4, r1, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfb8      	it	lt
 80068a2:	18e4      	addlt	r4, r4, r3
 80068a4:	f000 f8e0 	bl	8006a68 <__malloc_lock>
 80068a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <_free_r+0x90>)
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	b933      	cbnz	r3, 80068bc <_free_r+0x2c>
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	4628      	mov	r0, r5
 80068b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b8:	f000 b8dc 	b.w	8006a74 <__malloc_unlock>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d908      	bls.n	80068d2 <_free_r+0x42>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	1821      	adds	r1, r4, r0
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf01      	itttt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	1809      	addeq	r1, r1, r0
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	e7ed      	b.n	80068ae <_free_r+0x1e>
 80068d2:	461a      	mov	r2, r3
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b10b      	cbz	r3, 80068dc <_free_r+0x4c>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d9fa      	bls.n	80068d2 <_free_r+0x42>
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	1850      	adds	r0, r2, r1
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d10b      	bne.n	80068fc <_free_r+0x6c>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	4401      	add	r1, r0
 80068e8:	1850      	adds	r0, r2, r1
 80068ea:	4283      	cmp	r3, r0
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	d1e0      	bne.n	80068b2 <_free_r+0x22>
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	4408      	add	r0, r1
 80068f8:	6010      	str	r0, [r2, #0]
 80068fa:	e7da      	b.n	80068b2 <_free_r+0x22>
 80068fc:	d902      	bls.n	8006904 <_free_r+0x74>
 80068fe:	230c      	movs	r3, #12
 8006900:	602b      	str	r3, [r5, #0]
 8006902:	e7d6      	b.n	80068b2 <_free_r+0x22>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	1821      	adds	r1, r4, r0
 8006908:	428b      	cmp	r3, r1
 800690a:	bf04      	itt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	bf04      	itt	eq
 8006914:	1809      	addeq	r1, r1, r0
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	6054      	str	r4, [r2, #4]
 800691a:	e7ca      	b.n	80068b2 <_free_r+0x22>
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	200004fc 	.word	0x200004fc

08006924 <sbrk_aligned>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4e0f      	ldr	r6, [pc, #60]	@ (8006964 <sbrk_aligned+0x40>)
 8006928:	460c      	mov	r4, r1
 800692a:	6831      	ldr	r1, [r6, #0]
 800692c:	4605      	mov	r5, r0
 800692e:	b911      	cbnz	r1, 8006936 <sbrk_aligned+0x12>
 8006930:	f000 fba6 	bl	8007080 <_sbrk_r>
 8006934:	6030      	str	r0, [r6, #0]
 8006936:	4621      	mov	r1, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 fba1 	bl	8007080 <_sbrk_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d103      	bne.n	800694a <sbrk_aligned+0x26>
 8006942:	f04f 34ff 	mov.w	r4, #4294967295
 8006946:	4620      	mov	r0, r4
 8006948:	bd70      	pop	{r4, r5, r6, pc}
 800694a:	1cc4      	adds	r4, r0, #3
 800694c:	f024 0403 	bic.w	r4, r4, #3
 8006950:	42a0      	cmp	r0, r4
 8006952:	d0f8      	beq.n	8006946 <sbrk_aligned+0x22>
 8006954:	1a21      	subs	r1, r4, r0
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fb92 	bl	8007080 <_sbrk_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d1f2      	bne.n	8006946 <sbrk_aligned+0x22>
 8006960:	e7ef      	b.n	8006942 <sbrk_aligned+0x1e>
 8006962:	bf00      	nop
 8006964:	200004f8 	.word	0x200004f8

08006968 <_malloc_r>:
 8006968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800696c:	1ccd      	adds	r5, r1, #3
 800696e:	f025 0503 	bic.w	r5, r5, #3
 8006972:	3508      	adds	r5, #8
 8006974:	2d0c      	cmp	r5, #12
 8006976:	bf38      	it	cc
 8006978:	250c      	movcc	r5, #12
 800697a:	2d00      	cmp	r5, #0
 800697c:	4606      	mov	r6, r0
 800697e:	db01      	blt.n	8006984 <_malloc_r+0x1c>
 8006980:	42a9      	cmp	r1, r5
 8006982:	d904      	bls.n	800698e <_malloc_r+0x26>
 8006984:	230c      	movs	r3, #12
 8006986:	6033      	str	r3, [r6, #0]
 8006988:	2000      	movs	r0, #0
 800698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a64 <_malloc_r+0xfc>
 8006992:	f000 f869 	bl	8006a68 <__malloc_lock>
 8006996:	f8d8 3000 	ldr.w	r3, [r8]
 800699a:	461c      	mov	r4, r3
 800699c:	bb44      	cbnz	r4, 80069f0 <_malloc_r+0x88>
 800699e:	4629      	mov	r1, r5
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7ff ffbf 	bl	8006924 <sbrk_aligned>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	4604      	mov	r4, r0
 80069aa:	d158      	bne.n	8006a5e <_malloc_r+0xf6>
 80069ac:	f8d8 4000 	ldr.w	r4, [r8]
 80069b0:	4627      	mov	r7, r4
 80069b2:	2f00      	cmp	r7, #0
 80069b4:	d143      	bne.n	8006a3e <_malloc_r+0xd6>
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	d04b      	beq.n	8006a52 <_malloc_r+0xea>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	4639      	mov	r1, r7
 80069be:	4630      	mov	r0, r6
 80069c0:	eb04 0903 	add.w	r9, r4, r3
 80069c4:	f000 fb5c 	bl	8007080 <_sbrk_r>
 80069c8:	4581      	cmp	r9, r0
 80069ca:	d142      	bne.n	8006a52 <_malloc_r+0xea>
 80069cc:	6821      	ldr	r1, [r4, #0]
 80069ce:	1a6d      	subs	r5, r5, r1
 80069d0:	4629      	mov	r1, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ffa6 	bl	8006924 <sbrk_aligned>
 80069d8:	3001      	adds	r0, #1
 80069da:	d03a      	beq.n	8006a52 <_malloc_r+0xea>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	442b      	add	r3, r5
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	f8d8 3000 	ldr.w	r3, [r8]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	bb62      	cbnz	r2, 8006a44 <_malloc_r+0xdc>
 80069ea:	f8c8 7000 	str.w	r7, [r8]
 80069ee:	e00f      	b.n	8006a10 <_malloc_r+0xa8>
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	1b52      	subs	r2, r2, r5
 80069f4:	d420      	bmi.n	8006a38 <_malloc_r+0xd0>
 80069f6:	2a0b      	cmp	r2, #11
 80069f8:	d917      	bls.n	8006a2a <_malloc_r+0xc2>
 80069fa:	1961      	adds	r1, r4, r5
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	6025      	str	r5, [r4, #0]
 8006a00:	bf18      	it	ne
 8006a02:	6059      	strne	r1, [r3, #4]
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	bf08      	it	eq
 8006a08:	f8c8 1000 	streq.w	r1, [r8]
 8006a0c:	5162      	str	r2, [r4, r5]
 8006a0e:	604b      	str	r3, [r1, #4]
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 f82f 	bl	8006a74 <__malloc_unlock>
 8006a16:	f104 000b 	add.w	r0, r4, #11
 8006a1a:	1d23      	adds	r3, r4, #4
 8006a1c:	f020 0007 	bic.w	r0, r0, #7
 8006a20:	1ac2      	subs	r2, r0, r3
 8006a22:	bf1c      	itt	ne
 8006a24:	1a1b      	subne	r3, r3, r0
 8006a26:	50a3      	strne	r3, [r4, r2]
 8006a28:	e7af      	b.n	800698a <_malloc_r+0x22>
 8006a2a:	6862      	ldr	r2, [r4, #4]
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	bf0c      	ite	eq
 8006a30:	f8c8 2000 	streq.w	r2, [r8]
 8006a34:	605a      	strne	r2, [r3, #4]
 8006a36:	e7eb      	b.n	8006a10 <_malloc_r+0xa8>
 8006a38:	4623      	mov	r3, r4
 8006a3a:	6864      	ldr	r4, [r4, #4]
 8006a3c:	e7ae      	b.n	800699c <_malloc_r+0x34>
 8006a3e:	463c      	mov	r4, r7
 8006a40:	687f      	ldr	r7, [r7, #4]
 8006a42:	e7b6      	b.n	80069b2 <_malloc_r+0x4a>
 8006a44:	461a      	mov	r2, r3
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d1fb      	bne.n	8006a44 <_malloc_r+0xdc>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	6053      	str	r3, [r2, #4]
 8006a50:	e7de      	b.n	8006a10 <_malloc_r+0xa8>
 8006a52:	230c      	movs	r3, #12
 8006a54:	6033      	str	r3, [r6, #0]
 8006a56:	4630      	mov	r0, r6
 8006a58:	f000 f80c 	bl	8006a74 <__malloc_unlock>
 8006a5c:	e794      	b.n	8006988 <_malloc_r+0x20>
 8006a5e:	6005      	str	r5, [r0, #0]
 8006a60:	e7d6      	b.n	8006a10 <_malloc_r+0xa8>
 8006a62:	bf00      	nop
 8006a64:	200004fc 	.word	0x200004fc

08006a68 <__malloc_lock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	@ (8006a70 <__malloc_lock+0x8>)
 8006a6a:	f7ff bf0f 	b.w	800688c <__retarget_lock_acquire_recursive>
 8006a6e:	bf00      	nop
 8006a70:	200004f4 	.word	0x200004f4

08006a74 <__malloc_unlock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	@ (8006a7c <__malloc_unlock+0x8>)
 8006a76:	f7ff bf0a 	b.w	800688e <__retarget_lock_release_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	200004f4 	.word	0x200004f4

08006a80 <__ssputs_r>:
 8006a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	688e      	ldr	r6, [r1, #8]
 8006a86:	461f      	mov	r7, r3
 8006a88:	42be      	cmp	r6, r7
 8006a8a:	680b      	ldr	r3, [r1, #0]
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	4690      	mov	r8, r2
 8006a92:	d82d      	bhi.n	8006af0 <__ssputs_r+0x70>
 8006a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a9c:	d026      	beq.n	8006aec <__ssputs_r+0x6c>
 8006a9e:	6965      	ldr	r5, [r4, #20]
 8006aa0:	6909      	ldr	r1, [r1, #16]
 8006aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aa6:	eba3 0901 	sub.w	r9, r3, r1
 8006aaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aae:	1c7b      	adds	r3, r7, #1
 8006ab0:	444b      	add	r3, r9
 8006ab2:	106d      	asrs	r5, r5, #1
 8006ab4:	429d      	cmp	r5, r3
 8006ab6:	bf38      	it	cc
 8006ab8:	461d      	movcc	r5, r3
 8006aba:	0553      	lsls	r3, r2, #21
 8006abc:	d527      	bpl.n	8006b0e <__ssputs_r+0x8e>
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7ff ff52 	bl	8006968 <_malloc_r>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	b360      	cbz	r0, 8006b22 <__ssputs_r+0xa2>
 8006ac8:	6921      	ldr	r1, [r4, #16]
 8006aca:	464a      	mov	r2, r9
 8006acc:	f000 fae8 	bl	80070a0 <memcpy>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	6126      	str	r6, [r4, #16]
 8006ade:	6165      	str	r5, [r4, #20]
 8006ae0:	444e      	add	r6, r9
 8006ae2:	eba5 0509 	sub.w	r5, r5, r9
 8006ae6:	6026      	str	r6, [r4, #0]
 8006ae8:	60a5      	str	r5, [r4, #8]
 8006aea:	463e      	mov	r6, r7
 8006aec:	42be      	cmp	r6, r7
 8006aee:	d900      	bls.n	8006af2 <__ssputs_r+0x72>
 8006af0:	463e      	mov	r6, r7
 8006af2:	6820      	ldr	r0, [r4, #0]
 8006af4:	4632      	mov	r2, r6
 8006af6:	4641      	mov	r1, r8
 8006af8:	f000 faa8 	bl	800704c <memmove>
 8006afc:	68a3      	ldr	r3, [r4, #8]
 8006afe:	1b9b      	subs	r3, r3, r6
 8006b00:	60a3      	str	r3, [r4, #8]
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	4433      	add	r3, r6
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	462a      	mov	r2, r5
 8006b10:	f000 fad4 	bl	80070bc <_realloc_r>
 8006b14:	4606      	mov	r6, r0
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d1e0      	bne.n	8006adc <__ssputs_r+0x5c>
 8006b1a:	6921      	ldr	r1, [r4, #16]
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	f7ff feb7 	bl	8006890 <_free_r>
 8006b22:	230c      	movs	r3, #12
 8006b24:	f8ca 3000 	str.w	r3, [sl]
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e7e9      	b.n	8006b0a <__ssputs_r+0x8a>
	...

08006b38 <_svfiprintf_r>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	4698      	mov	r8, r3
 8006b3e:	898b      	ldrh	r3, [r1, #12]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	b09d      	sub	sp, #116	@ 0x74
 8006b44:	4607      	mov	r7, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	d510      	bpl.n	8006b6e <_svfiprintf_r+0x36>
 8006b4c:	690b      	ldr	r3, [r1, #16]
 8006b4e:	b973      	cbnz	r3, 8006b6e <_svfiprintf_r+0x36>
 8006b50:	2140      	movs	r1, #64	@ 0x40
 8006b52:	f7ff ff09 	bl	8006968 <_malloc_r>
 8006b56:	6028      	str	r0, [r5, #0]
 8006b58:	6128      	str	r0, [r5, #16]
 8006b5a:	b930      	cbnz	r0, 8006b6a <_svfiprintf_r+0x32>
 8006b5c:	230c      	movs	r3, #12
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	b01d      	add	sp, #116	@ 0x74
 8006b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6a:	2340      	movs	r3, #64	@ 0x40
 8006b6c:	616b      	str	r3, [r5, #20]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b72:	2320      	movs	r3, #32
 8006b74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b7c:	2330      	movs	r3, #48	@ 0x30
 8006b7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d1c <_svfiprintf_r+0x1e4>
 8006b82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b86:	f04f 0901 	mov.w	r9, #1
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b92:	b10a      	cbz	r2, 8006b98 <_svfiprintf_r+0x60>
 8006b94:	2a25      	cmp	r2, #37	@ 0x25
 8006b96:	d1f9      	bne.n	8006b8c <_svfiprintf_r+0x54>
 8006b98:	ebba 0b04 	subs.w	fp, sl, r4
 8006b9c:	d00b      	beq.n	8006bb6 <_svfiprintf_r+0x7e>
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ff6b 	bl	8006a80 <__ssputs_r>
 8006baa:	3001      	adds	r0, #1
 8006bac:	f000 80a7 	beq.w	8006cfe <_svfiprintf_r+0x1c6>
 8006bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bb2:	445a      	add	r2, fp
 8006bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 809f 	beq.w	8006cfe <_svfiprintf_r+0x1c6>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bca:	f10a 0a01 	add.w	sl, sl, #1
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	9307      	str	r3, [sp, #28]
 8006bd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bd8:	4654      	mov	r4, sl
 8006bda:	2205      	movs	r2, #5
 8006bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be0:	484e      	ldr	r0, [pc, #312]	@ (8006d1c <_svfiprintf_r+0x1e4>)
 8006be2:	f7f9 fafd 	bl	80001e0 <memchr>
 8006be6:	9a04      	ldr	r2, [sp, #16]
 8006be8:	b9d8      	cbnz	r0, 8006c22 <_svfiprintf_r+0xea>
 8006bea:	06d0      	lsls	r0, r2, #27
 8006bec:	bf44      	itt	mi
 8006bee:	2320      	movmi	r3, #32
 8006bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bf4:	0711      	lsls	r1, r2, #28
 8006bf6:	bf44      	itt	mi
 8006bf8:	232b      	movmi	r3, #43	@ 0x2b
 8006bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c04:	d015      	beq.n	8006c32 <_svfiprintf_r+0xfa>
 8006c06:	9a07      	ldr	r2, [sp, #28]
 8006c08:	4654      	mov	r4, sl
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f04f 0c0a 	mov.w	ip, #10
 8006c10:	4621      	mov	r1, r4
 8006c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c16:	3b30      	subs	r3, #48	@ 0x30
 8006c18:	2b09      	cmp	r3, #9
 8006c1a:	d94b      	bls.n	8006cb4 <_svfiprintf_r+0x17c>
 8006c1c:	b1b0      	cbz	r0, 8006c4c <_svfiprintf_r+0x114>
 8006c1e:	9207      	str	r2, [sp, #28]
 8006c20:	e014      	b.n	8006c4c <_svfiprintf_r+0x114>
 8006c22:	eba0 0308 	sub.w	r3, r0, r8
 8006c26:	fa09 f303 	lsl.w	r3, r9, r3
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	46a2      	mov	sl, r4
 8006c30:	e7d2      	b.n	8006bd8 <_svfiprintf_r+0xa0>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	1d19      	adds	r1, r3, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	9103      	str	r1, [sp, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfbb      	ittet	lt
 8006c3e:	425b      	neglt	r3, r3
 8006c40:	f042 0202 	orrlt.w	r2, r2, #2
 8006c44:	9307      	strge	r3, [sp, #28]
 8006c46:	9307      	strlt	r3, [sp, #28]
 8006c48:	bfb8      	it	lt
 8006c4a:	9204      	strlt	r2, [sp, #16]
 8006c4c:	7823      	ldrb	r3, [r4, #0]
 8006c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c50:	d10a      	bne.n	8006c68 <_svfiprintf_r+0x130>
 8006c52:	7863      	ldrb	r3, [r4, #1]
 8006c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c56:	d132      	bne.n	8006cbe <_svfiprintf_r+0x186>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	9203      	str	r2, [sp, #12]
 8006c60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c64:	3402      	adds	r4, #2
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d2c <_svfiprintf_r+0x1f4>
 8006c6c:	7821      	ldrb	r1, [r4, #0]
 8006c6e:	2203      	movs	r2, #3
 8006c70:	4650      	mov	r0, sl
 8006c72:	f7f9 fab5 	bl	80001e0 <memchr>
 8006c76:	b138      	cbz	r0, 8006c88 <_svfiprintf_r+0x150>
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	eba0 000a 	sub.w	r0, r0, sl
 8006c7e:	2240      	movs	r2, #64	@ 0x40
 8006c80:	4082      	lsls	r2, r0
 8006c82:	4313      	orrs	r3, r2
 8006c84:	3401      	adds	r4, #1
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8c:	4824      	ldr	r0, [pc, #144]	@ (8006d20 <_svfiprintf_r+0x1e8>)
 8006c8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c92:	2206      	movs	r2, #6
 8006c94:	f7f9 faa4 	bl	80001e0 <memchr>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d036      	beq.n	8006d0a <_svfiprintf_r+0x1d2>
 8006c9c:	4b21      	ldr	r3, [pc, #132]	@ (8006d24 <_svfiprintf_r+0x1ec>)
 8006c9e:	bb1b      	cbnz	r3, 8006ce8 <_svfiprintf_r+0x1b0>
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	3307      	adds	r3, #7
 8006ca4:	f023 0307 	bic.w	r3, r3, #7
 8006ca8:	3308      	adds	r3, #8
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cae:	4433      	add	r3, r6
 8006cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cb2:	e76a      	b.n	8006b8a <_svfiprintf_r+0x52>
 8006cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb8:	460c      	mov	r4, r1
 8006cba:	2001      	movs	r0, #1
 8006cbc:	e7a8      	b.n	8006c10 <_svfiprintf_r+0xd8>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	9305      	str	r3, [sp, #20]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f04f 0c0a 	mov.w	ip, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	3a30      	subs	r2, #48	@ 0x30
 8006cd2:	2a09      	cmp	r2, #9
 8006cd4:	d903      	bls.n	8006cde <_svfiprintf_r+0x1a6>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0c6      	beq.n	8006c68 <_svfiprintf_r+0x130>
 8006cda:	9105      	str	r1, [sp, #20]
 8006cdc:	e7c4      	b.n	8006c68 <_svfiprintf_r+0x130>
 8006cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e7f0      	b.n	8006cca <_svfiprintf_r+0x192>
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4b0e      	ldr	r3, [pc, #56]	@ (8006d28 <_svfiprintf_r+0x1f0>)
 8006cf0:	a904      	add	r1, sp, #16
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	1c42      	adds	r2, r0, #1
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	d1d6      	bne.n	8006cac <_svfiprintf_r+0x174>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	065b      	lsls	r3, r3, #25
 8006d02:	f53f af2d 	bmi.w	8006b60 <_svfiprintf_r+0x28>
 8006d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d08:	e72c      	b.n	8006b64 <_svfiprintf_r+0x2c>
 8006d0a:	ab03      	add	r3, sp, #12
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <_svfiprintf_r+0x1f0>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	4638      	mov	r0, r7
 8006d16:	f000 f879 	bl	8006e0c <_printf_i>
 8006d1a:	e7ed      	b.n	8006cf8 <_svfiprintf_r+0x1c0>
 8006d1c:	0800a578 	.word	0x0800a578
 8006d20:	0800a582 	.word	0x0800a582
 8006d24:	00000000 	.word	0x00000000
 8006d28:	08006a81 	.word	0x08006a81
 8006d2c:	0800a57e 	.word	0x0800a57e

08006d30 <_printf_common>:
 8006d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	4616      	mov	r6, r2
 8006d36:	4698      	mov	r8, r3
 8006d38:	688a      	ldr	r2, [r1, #8]
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfb8      	it	lt
 8006d44:	4613      	movlt	r3, r2
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	b10a      	cbz	r2, 8006d56 <_printf_common+0x26>
 8006d52:	3301      	adds	r3, #1
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	0699      	lsls	r1, r3, #26
 8006d5a:	bf42      	ittt	mi
 8006d5c:	6833      	ldrmi	r3, [r6, #0]
 8006d5e:	3302      	addmi	r3, #2
 8006d60:	6033      	strmi	r3, [r6, #0]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	f015 0506 	ands.w	r5, r5, #6
 8006d68:	d106      	bne.n	8006d78 <_printf_common+0x48>
 8006d6a:	f104 0a19 	add.w	sl, r4, #25
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	6832      	ldr	r2, [r6, #0]
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	42ab      	cmp	r3, r5
 8006d76:	dc26      	bgt.n	8006dc6 <_printf_common+0x96>
 8006d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	3b00      	subs	r3, #0
 8006d80:	bf18      	it	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	0692      	lsls	r2, r2, #26
 8006d86:	d42b      	bmi.n	8006de0 <_printf_common+0xb0>
 8006d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c8      	blx	r9
 8006d92:	3001      	adds	r0, #1
 8006d94:	d01e      	beq.n	8006dd4 <_printf_common+0xa4>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	f003 0306 	and.w	r3, r3, #6
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	bf02      	ittt	eq
 8006da2:	68e5      	ldreq	r5, [r4, #12]
 8006da4:	6833      	ldreq	r3, [r6, #0]
 8006da6:	1aed      	subeq	r5, r5, r3
 8006da8:	68a3      	ldr	r3, [r4, #8]
 8006daa:	bf0c      	ite	eq
 8006dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db0:	2500      	movne	r5, #0
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bfc4      	itt	gt
 8006db6:	1a9b      	subgt	r3, r3, r2
 8006db8:	18ed      	addgt	r5, r5, r3
 8006dba:	2600      	movs	r6, #0
 8006dbc:	341a      	adds	r4, #26
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	d11a      	bne.n	8006df8 <_printf_common+0xc8>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e008      	b.n	8006dd8 <_printf_common+0xa8>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4641      	mov	r1, r8
 8006dcc:	4638      	mov	r0, r7
 8006dce:	47c8      	blx	r9
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_printf_common+0xac>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e7c6      	b.n	8006d6e <_printf_common+0x3e>
 8006de0:	18e1      	adds	r1, r4, r3
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	2030      	movs	r0, #48	@ 0x30
 8006de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dea:	4422      	add	r2, r4
 8006dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006df4:	3302      	adds	r3, #2
 8006df6:	e7c7      	b.n	8006d88 <_printf_common+0x58>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c8      	blx	r9
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0e6      	beq.n	8006dd4 <_printf_common+0xa4>
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7d9      	b.n	8006dbe <_printf_common+0x8e>
	...

08006e0c <_printf_i>:
 8006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	7e0f      	ldrb	r7, [r1, #24]
 8006e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e14:	2f78      	cmp	r7, #120	@ 0x78
 8006e16:	4691      	mov	r9, r2
 8006e18:	4680      	mov	r8, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e22:	d807      	bhi.n	8006e34 <_printf_i+0x28>
 8006e24:	2f62      	cmp	r7, #98	@ 0x62
 8006e26:	d80a      	bhi.n	8006e3e <_printf_i+0x32>
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	f000 80d2 	beq.w	8006fd2 <_printf_i+0x1c6>
 8006e2e:	2f58      	cmp	r7, #88	@ 0x58
 8006e30:	f000 80b9 	beq.w	8006fa6 <_printf_i+0x19a>
 8006e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e3c:	e03a      	b.n	8006eb4 <_printf_i+0xa8>
 8006e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e42:	2b15      	cmp	r3, #21
 8006e44:	d8f6      	bhi.n	8006e34 <_printf_i+0x28>
 8006e46:	a101      	add	r1, pc, #4	@ (adr r1, 8006e4c <_printf_i+0x40>)
 8006e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006e35 	.word	0x08006e35
 8006e58:	08006e35 	.word	0x08006e35
 8006e5c:	08006e35 	.word	0x08006e35
 8006e60:	08006e35 	.word	0x08006e35
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006e35 	.word	0x08006e35
 8006e6c:	08006e35 	.word	0x08006e35
 8006e70:	08006e35 	.word	0x08006e35
 8006e74:	08006e35 	.word	0x08006e35
 8006e78:	08006fb9 	.word	0x08006fb9
 8006e7c:	08006ee3 	.word	0x08006ee3
 8006e80:	08006f73 	.word	0x08006f73
 8006e84:	08006e35 	.word	0x08006e35
 8006e88:	08006e35 	.word	0x08006e35
 8006e8c:	08006fdb 	.word	0x08006fdb
 8006e90:	08006e35 	.word	0x08006e35
 8006e94:	08006ee3 	.word	0x08006ee3
 8006e98:	08006e35 	.word	0x08006e35
 8006e9c:	08006e35 	.word	0x08006e35
 8006ea0:	08006f7b 	.word	0x08006f7b
 8006ea4:	6833      	ldr	r3, [r6, #0]
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6032      	str	r2, [r6, #0]
 8006eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e09d      	b.n	8006ff4 <_printf_i+0x1e8>
 8006eb8:	6833      	ldr	r3, [r6, #0]
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	1d19      	adds	r1, r3, #4
 8006ebe:	6031      	str	r1, [r6, #0]
 8006ec0:	0606      	lsls	r6, r0, #24
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_i+0xbc>
 8006ec4:	681d      	ldr	r5, [r3, #0]
 8006ec6:	e003      	b.n	8006ed0 <_printf_i+0xc4>
 8006ec8:	0645      	lsls	r5, r0, #25
 8006eca:	d5fb      	bpl.n	8006ec4 <_printf_i+0xb8>
 8006ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	da03      	bge.n	8006edc <_printf_i+0xd0>
 8006ed4:	232d      	movs	r3, #45	@ 0x2d
 8006ed6:	426d      	negs	r5, r5
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006edc:	4859      	ldr	r0, [pc, #356]	@ (8007044 <_printf_i+0x238>)
 8006ede:	230a      	movs	r3, #10
 8006ee0:	e011      	b.n	8006f06 <_printf_i+0xfa>
 8006ee2:	6821      	ldr	r1, [r4, #0]
 8006ee4:	6833      	ldr	r3, [r6, #0]
 8006ee6:	0608      	lsls	r0, r1, #24
 8006ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006eec:	d402      	bmi.n	8006ef4 <_printf_i+0xe8>
 8006eee:	0649      	lsls	r1, r1, #25
 8006ef0:	bf48      	it	mi
 8006ef2:	b2ad      	uxthmi	r5, r5
 8006ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ef6:	4853      	ldr	r0, [pc, #332]	@ (8007044 <_printf_i+0x238>)
 8006ef8:	6033      	str	r3, [r6, #0]
 8006efa:	bf14      	ite	ne
 8006efc:	230a      	movne	r3, #10
 8006efe:	2308      	moveq	r3, #8
 8006f00:	2100      	movs	r1, #0
 8006f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f06:	6866      	ldr	r6, [r4, #4]
 8006f08:	60a6      	str	r6, [r4, #8]
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	bfa2      	ittt	ge
 8006f0e:	6821      	ldrge	r1, [r4, #0]
 8006f10:	f021 0104 	bicge.w	r1, r1, #4
 8006f14:	6021      	strge	r1, [r4, #0]
 8006f16:	b90d      	cbnz	r5, 8006f1c <_printf_i+0x110>
 8006f18:	2e00      	cmp	r6, #0
 8006f1a:	d04b      	beq.n	8006fb4 <_printf_i+0x1a8>
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f22:	fb03 5711 	mls	r7, r3, r1, r5
 8006f26:	5dc7      	ldrb	r7, [r0, r7]
 8006f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f2c:	462f      	mov	r7, r5
 8006f2e:	42bb      	cmp	r3, r7
 8006f30:	460d      	mov	r5, r1
 8006f32:	d9f4      	bls.n	8006f1e <_printf_i+0x112>
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d10b      	bne.n	8006f50 <_printf_i+0x144>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	07df      	lsls	r7, r3, #31
 8006f3c:	d508      	bpl.n	8006f50 <_printf_i+0x144>
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	6861      	ldr	r1, [r4, #4]
 8006f42:	4299      	cmp	r1, r3
 8006f44:	bfde      	ittt	le
 8006f46:	2330      	movle	r3, #48	@ 0x30
 8006f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f50:	1b92      	subs	r2, r2, r6
 8006f52:	6122      	str	r2, [r4, #16]
 8006f54:	f8cd a000 	str.w	sl, [sp]
 8006f58:	464b      	mov	r3, r9
 8006f5a:	aa03      	add	r2, sp, #12
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f7ff fee6 	bl	8006d30 <_printf_common>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d14a      	bne.n	8006ffe <_printf_i+0x1f2>
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	b004      	add	sp, #16
 8006f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f043 0320 	orr.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	4833      	ldr	r0, [pc, #204]	@ (8007048 <_printf_i+0x23c>)
 8006f7c:	2778      	movs	r7, #120	@ 0x78
 8006f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	6831      	ldr	r1, [r6, #0]
 8006f86:	061f      	lsls	r7, r3, #24
 8006f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f8c:	d402      	bmi.n	8006f94 <_printf_i+0x188>
 8006f8e:	065f      	lsls	r7, r3, #25
 8006f90:	bf48      	it	mi
 8006f92:	b2ad      	uxthmi	r5, r5
 8006f94:	6031      	str	r1, [r6, #0]
 8006f96:	07d9      	lsls	r1, r3, #31
 8006f98:	bf44      	itt	mi
 8006f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f9e:	6023      	strmi	r3, [r4, #0]
 8006fa0:	b11d      	cbz	r5, 8006faa <_printf_i+0x19e>
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	e7ac      	b.n	8006f00 <_printf_i+0xf4>
 8006fa6:	4827      	ldr	r0, [pc, #156]	@ (8007044 <_printf_i+0x238>)
 8006fa8:	e7e9      	b.n	8006f7e <_printf_i+0x172>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	f023 0320 	bic.w	r3, r3, #32
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	e7f6      	b.n	8006fa2 <_printf_i+0x196>
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	e7bd      	b.n	8006f34 <_printf_i+0x128>
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	6825      	ldr	r5, [r4, #0]
 8006fbc:	6961      	ldr	r1, [r4, #20]
 8006fbe:	1d18      	adds	r0, r3, #4
 8006fc0:	6030      	str	r0, [r6, #0]
 8006fc2:	062e      	lsls	r6, r5, #24
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	d501      	bpl.n	8006fcc <_printf_i+0x1c0>
 8006fc8:	6019      	str	r1, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <_printf_i+0x1c6>
 8006fcc:	0668      	lsls	r0, r5, #25
 8006fce:	d5fb      	bpl.n	8006fc8 <_printf_i+0x1bc>
 8006fd0:	8019      	strh	r1, [r3, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	4616      	mov	r6, r2
 8006fd8:	e7bc      	b.n	8006f54 <_printf_i+0x148>
 8006fda:	6833      	ldr	r3, [r6, #0]
 8006fdc:	1d1a      	adds	r2, r3, #4
 8006fde:	6032      	str	r2, [r6, #0]
 8006fe0:	681e      	ldr	r6, [r3, #0]
 8006fe2:	6862      	ldr	r2, [r4, #4]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7f9 f8fa 	bl	80001e0 <memchr>
 8006fec:	b108      	cbz	r0, 8006ff2 <_printf_i+0x1e6>
 8006fee:	1b80      	subs	r0, r0, r6
 8006ff0:	6060      	str	r0, [r4, #4]
 8006ff2:	6863      	ldr	r3, [r4, #4]
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ffc:	e7aa      	b.n	8006f54 <_printf_i+0x148>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d0ad      	beq.n	8006f68 <_printf_i+0x15c>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	079b      	lsls	r3, r3, #30
 8007010:	d413      	bmi.n	800703a <_printf_i+0x22e>
 8007012:	68e0      	ldr	r0, [r4, #12]
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	4298      	cmp	r0, r3
 8007018:	bfb8      	it	lt
 800701a:	4618      	movlt	r0, r3
 800701c:	e7a6      	b.n	8006f6c <_printf_i+0x160>
 800701e:	2301      	movs	r3, #1
 8007020:	4632      	mov	r2, r6
 8007022:	4649      	mov	r1, r9
 8007024:	4640      	mov	r0, r8
 8007026:	47d0      	blx	sl
 8007028:	3001      	adds	r0, #1
 800702a:	d09d      	beq.n	8006f68 <_printf_i+0x15c>
 800702c:	3501      	adds	r5, #1
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	9903      	ldr	r1, [sp, #12]
 8007032:	1a5b      	subs	r3, r3, r1
 8007034:	42ab      	cmp	r3, r5
 8007036:	dcf2      	bgt.n	800701e <_printf_i+0x212>
 8007038:	e7eb      	b.n	8007012 <_printf_i+0x206>
 800703a:	2500      	movs	r5, #0
 800703c:	f104 0619 	add.w	r6, r4, #25
 8007040:	e7f5      	b.n	800702e <_printf_i+0x222>
 8007042:	bf00      	nop
 8007044:	0800a589 	.word	0x0800a589
 8007048:	0800a59a 	.word	0x0800a59a

0800704c <memmove>:
 800704c:	4288      	cmp	r0, r1
 800704e:	b510      	push	{r4, lr}
 8007050:	eb01 0402 	add.w	r4, r1, r2
 8007054:	d902      	bls.n	800705c <memmove+0x10>
 8007056:	4284      	cmp	r4, r0
 8007058:	4623      	mov	r3, r4
 800705a:	d807      	bhi.n	800706c <memmove+0x20>
 800705c:	1e43      	subs	r3, r0, #1
 800705e:	42a1      	cmp	r1, r4
 8007060:	d008      	beq.n	8007074 <memmove+0x28>
 8007062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706a:	e7f8      	b.n	800705e <memmove+0x12>
 800706c:	4402      	add	r2, r0
 800706e:	4601      	mov	r1, r0
 8007070:	428a      	cmp	r2, r1
 8007072:	d100      	bne.n	8007076 <memmove+0x2a>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800707a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800707e:	e7f7      	b.n	8007070 <memmove+0x24>

08007080 <_sbrk_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d06      	ldr	r5, [pc, #24]	@ (800709c <_sbrk_r+0x1c>)
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	602b      	str	r3, [r5, #0]
 800708c:	f7fa fe88 	bl	8001da0 <_sbrk>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_sbrk_r+0x1a>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_sbrk_r+0x1a>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	200004f0 	.word	0x200004f0

080070a0 <memcpy>:
 80070a0:	440a      	add	r2, r1
 80070a2:	4291      	cmp	r1, r2
 80070a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a8:	d100      	bne.n	80070ac <memcpy+0xc>
 80070aa:	4770      	bx	lr
 80070ac:	b510      	push	{r4, lr}
 80070ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b6:	4291      	cmp	r1, r2
 80070b8:	d1f9      	bne.n	80070ae <memcpy+0xe>
 80070ba:	bd10      	pop	{r4, pc}

080070bc <_realloc_r>:
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	4680      	mov	r8, r0
 80070c2:	4615      	mov	r5, r2
 80070c4:	460c      	mov	r4, r1
 80070c6:	b921      	cbnz	r1, 80070d2 <_realloc_r+0x16>
 80070c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070cc:	4611      	mov	r1, r2
 80070ce:	f7ff bc4b 	b.w	8006968 <_malloc_r>
 80070d2:	b92a      	cbnz	r2, 80070e0 <_realloc_r+0x24>
 80070d4:	f7ff fbdc 	bl	8006890 <_free_r>
 80070d8:	2400      	movs	r4, #0
 80070da:	4620      	mov	r0, r4
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e0:	f000 f81a 	bl	8007118 <_malloc_usable_size_r>
 80070e4:	4285      	cmp	r5, r0
 80070e6:	4606      	mov	r6, r0
 80070e8:	d802      	bhi.n	80070f0 <_realloc_r+0x34>
 80070ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80070ee:	d8f4      	bhi.n	80070da <_realloc_r+0x1e>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4640      	mov	r0, r8
 80070f4:	f7ff fc38 	bl	8006968 <_malloc_r>
 80070f8:	4607      	mov	r7, r0
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d0ec      	beq.n	80070d8 <_realloc_r+0x1c>
 80070fe:	42b5      	cmp	r5, r6
 8007100:	462a      	mov	r2, r5
 8007102:	4621      	mov	r1, r4
 8007104:	bf28      	it	cs
 8007106:	4632      	movcs	r2, r6
 8007108:	f7ff ffca 	bl	80070a0 <memcpy>
 800710c:	4621      	mov	r1, r4
 800710e:	4640      	mov	r0, r8
 8007110:	f7ff fbbe 	bl	8006890 <_free_r>
 8007114:	463c      	mov	r4, r7
 8007116:	e7e0      	b.n	80070da <_realloc_r+0x1e>

08007118 <_malloc_usable_size_r>:
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f18      	subs	r0, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbc      	itt	lt
 8007122:	580b      	ldrlt	r3, [r1, r0]
 8007124:	18c0      	addlt	r0, r0, r3
 8007126:	4770      	bx	lr

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
